{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1rXkhrRXHSRAcSMPtlpsbg9B9TTGmjt20","timestamp":1694384794480},{"file_id":"1Iz73EZQhJeulsNZ8nc1wT6wNFFhY0lNQ","timestamp":1655822539542}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Teacher Note 1: **I appreciate any critical feedback so please let me know what you think!**\n","\n","I think it is important to get students well oriented with some python that works and some that does not work, along with showing them that python code is google friendly.  I think starting this way may help address problems early on that could interfere with the physics topics later.\n","\n","**To begin the classroom activities:**\n","\n","- Why is coding something that is important and that everyone can do?\n","Intro to coding and why it's important: [What most schools donâ€™t teach](https://www.youtube.com/watch?v=nKIu9yen5nc)\n","\n","**Introducing Colab Notebooks and Manipulating Python**\n","- [Intro to Python](https://colab.research.google.com/drive/11uoi863ZvYg9ujSuY8qNl_RMebdKRpcD#scrollTo=gFcsa6oKKgGt) - Ready to Pilot - (Modified/Longer version of [A. LaMee's Intro to Coding](https://colab.research.google.com/drive/1PNOPE0HJd4T_uZCmj4_pAruoQgIjgBB-) notebook)\n","- [The Land of Errors](https://colab.research.google.com/drive/12ziQaRBLEEc4pvs-SvRwpHD1pLmXUZLh) - Ready to Pilot - (Follow up to the Intro to Python notebook, having students purposely run into errors.)\n","- [Python + Google](https://colab.research.google.com/drive/1ml2SLMclz2rxveooX6Kz_WQHGlAJ6EBA#scrollTo=-ELr799LeCIC) - Ready to Pilot - (Follow up to the Intro to Python notebook, having students use google to find new code to copy/paste and manipulate.)\n","\n","\n","\n"],"metadata":{"id":"UVEgGGZnSo_E"}},{"cell_type":"markdown","source":["#Teacher Note 2:\n","\n","Below is a lesson on collecting and analyzing 3-axis accelerometer data.  I have used microbits in the past for this but Phyphox, Arduino, or other means for collecting this data would work as well.\n","\n","I try to place my students in groups of three and assign them jobs throughout their projects so that they have some ownership of the work.  This lends well to implementing the driver and two navigators model.\n","\n","I also use proficiency scales in my classroom to show students where we are heading and what is expected of them.  At the bottom of that document you will find priority and supporting standards for this project.  I have not gotten all of the kinks out of the document attached in **Where to Begin** section yet and if using something other than the microbits or wireless accelerometers, the portion on wireless communication will not be valuable. This could also be paired down into several notebooks and lessons.\n","\n","<hr/>\n","\n","\n","**From here down is the notebook that I would have my student groups work through. Enjoy!**\n","\n","<hr/>"],"metadata":{"id":"GmtJ8vh4VVQj"}},{"cell_type":"markdown","source":["#Where to Begin"],"metadata":{"id":"9BvrXJ7Ihrt-"}},{"cell_type":"markdown","source":["**IMPORTANT:**\n","- You won't hurt anything by experimenting. If you break it, close the tab and open the activity again to start over.\n","\n","- When you are ready to **save**, Go to File > Save a Copy in Drive so you'll have your own version to work on. it will show up in a Colab Notebooks folder.  \n","\n","\n","We will be in groups of three for this project.  Start by determining your Group Manager, Scribe and Gopher. ***Scribe, create a google drive folder called Sensing Force and share it with your team.***\n","\n","Review the  [Sensing Force - Proficiency Scale](https://docs.google.com/document/d/1Mg1U12tlNqtl8zT7oZX1E75O1-Brb7BQhDsiVw-V_2g/edit)\n","\n","You will be using microbits for this exercise and will need to program them to collect and transmit data. **NOTE**: Block coding instructions and examples are in the resource section of the proficiency scale linked above.\n","\n","**As an alternative** you may use Phyphox and access the 3-axis accelerometer on your phone.  Select Acceleration with g."],"metadata":{"id":"W7-VJuCgWyOs"}},{"cell_type":"markdown","source":["#Tasks"],"metadata":{"id":"tKwRueYHhjYd"}},{"cell_type":"markdown","source":["**Task 1:** Get your sensor working and communication as it should. Troubleshoot as a team and determine how to collect, upload, and analyze data from your sensor.\n"," - Determine the x, y , and z axis for your sensor\n"," - Run an experiment by pushing your sensor and a car across the floor while collecting data prior to the push, and continue collecting until the car stops.  \n","\n","**Task 2:** Design and complete an experiment, using a ramp, car, and your accelerometer to determine how acceleration relates to the motion of the car.\n","\n","**Task 3:**  Design and complete an experiment that collides your car after going down a ram into another car in a head on collision.\n","\n","**Task 4:** Design a unique experiment that utilizes your knowledge about forces, mass, acceleration, and momentum to show how they interact in everyday life."],"metadata":{"id":"N5dzJv_yd56i"}},{"cell_type":"markdown","source":["#Uploading File to Colab for Analysis"],"metadata":{"id":"tW_fdbGDiCqE"}},{"cell_type":"markdown","source":["[Download the example data to check your understanding.](https://drive.google.com/file/d/1E8x6xQFv53atrSOmGzOV0LfHKEPfEzyf/view?usp=sharing)\n","\n","Upload the file directly:\n","This only lasts for the duration of running this notebook. You'll need to repeat this if you close the notebook and come back to it later.\n","\n","In Colab, click folder icon in left menu. It's below the {x}\n","Click the upload icon at top of that window\n","Wait until you see the filename appear in the directory on the left. Then,\n","Right-click on the filename or click the 3 vertical dots at the end of the filename to \"copy path\"\n","Paste that path into your read fucntion with single quotes around it.\n","\n","**In your groups, upload data to your groups shared folder with an appropriate name to keep track of the data then upload it to the notebook from your computer.**"],"metadata":{"id":"IiMk3qIRW4it"}},{"cell_type":"markdown","source":["#Task 1 Learning Your Equipment and How to Code!"],"metadata":{"id":"cG4GcW_OUMqW"}},{"cell_type":"markdown","source":["##**What Does the data look like?**"],"metadata":{"id":"FLQqGunHbMLW"}},{"cell_type":"code","source":["#A hashtag tells the program \"don't read the rest of the line\"\n","#That way we can write \"comments\" to humans like you trying to figure out what the code does.\n","\n","#To run a block of code click on the play button to the left of the block.\n"],"metadata":{"id":"FLX7NCypkpau"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Import libraries that can be useful in your analysis\n","#If you don't run the code with your libraries nothing will work.\n","\n","import pandas as pd\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt"],"metadata":{"id":"pJH-q9VHj_Go"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Importing .cvs data from your computer\n","\n","data = pd.read_csv('/content/Phone Slide.csv') #'Path Goes HERE' in place of '/content/Raw Data.csv' so that the program can read the file that you uploaded.\n"],"metadata":{"id":"y1J1Tt1vkMeU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.shape #The .shape command displays the (number of rows , number of columns) in a file.\n"],"metadata":{"id":"FfUDLoSlqMs_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data.head(5) #Shows the first 5 rows of data with heading line"],"metadata":{"id":"VZXDLtsPqM50"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Question**\n","\n","How many lines of data were recorded?\n"," - Response:\n","\n","\n","What are the names of the columns in the data? (Capitals matter!)\n"," - Response:"],"metadata":{"id":"zDuHr7JRLmF1"}},{"cell_type":"code","source":["#Sometimes it is valuable to find descriptive statistics for a column in your dataframe - data['column_name'].describe()\n","#Determine your descriptive statistics for the four columns of data identified above\n","data['Time (s)'].describe() #Note the format of identifying the column in the .describe command, that will be used throughout to identify a column in a dataset."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XVcJPNie6HP0","executionInfo":{"status":"ok","timestamp":1655397950378,"user_tz":360,"elapsed":16,"user":{"displayName":"Zach Beam","userId":"03051153181777826122"}},"outputId":"0aac8fca-bd1b-4903-92b7-ec9237d0d253"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["count    6419.000000\n","mean       15.677949\n","std         9.000157\n","min         0.094200\n","25%         7.885000\n","50%        15.700000\n","75%        23.500000\n","max        31.300000\n","Name: Time (s), dtype: float64"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["data['column_name'].describe()"],"metadata":{"id":"dn5kV47XN9fd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data['column_name'].describe()"],"metadata":{"id":"-sexUBFEN_Gx"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data['column_name'].describe()"],"metadata":{"id":"Rmg1KrvLN_vf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Question**\n","\n","Explain the following:\n","- count:\n","- mean:\n","- std:\n","- min:\n","- 25%:\n","- 50%:\n","- 75%:\n","- max:\n","\n","\n","How long do you think this experiment lasted? Explain your reasoning\n","\n"," - Response:"],"metadata":{"id":"_Ox2J75_MZhQ"}},{"cell_type":"code","source":["#The next step is to graph our data to see if there is anything we can conclude from it.\n","#Time is a good x axis variable - plt.scatter(x, y)\n","plt.scatter(data['Time (s)'], data['Acceleration x (m/s^2)'], s=1, alpha =1, color='pink', edgecolor='blue') #Notice the difference between the practice set of data in the Intro to Python activity and using columns of data in this scatter plot.\n","plt.xlim(0,60) #Adjust the scatter plot x-axis\n","plt.ylim(-10, 10) #Adjust the scatter plot x-axis\n","plt.title(\"Title\")\n","plt.xlabel(\"X-Axis (Units)\")\n","plt.ylabel(\"Y-Axis (Units)\")\n","plt.grid(False);\n","\n","#Review your plot to determine if you need to adjust your plot settings."],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"g-V8Vzm2NWGr","executionInfo":{"status":"ok","timestamp":1655397959066,"user_tz":360,"elapsed":547,"user":{"displayName":"Zach Beam","userId":"03051153181777826122"}},"outputId":"65515b5d-0977-4336-d56d-435f56601db6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Graph Time vs Acceleration in the y\n","#Your code here\n","\n","#Review your plot to determine if you need to adjust your plot settings."],"metadata":{"id":"jgKIjrS-PIW_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Graph Time vs Acceleration in the z\n","#Your code here\n","\n","#Review your plot to determine if you need to adjust your plot settings."],"metadata":{"id":"-Xw8ce9cPTvI"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##**Further Analysis!!**\n","\n","Sometimes the data recorded is not needed for our analysis.  For example if you push your car across the floor, only two of the three axis could show an acceleration.\n","\n","\n","What trims could you make to focus your data? Explain your answers\n"," - Response:"],"metadata":{"id":"RAVyPp6XMoj2"}},{"cell_type":"code","source":["#To make adjustments to your data set, you may need to add columns for calculations on each line of data.\n","\n","#For Example, applying the Pythagorean Theorem to cut Acceleration y out of the work...  WHY would we do that?\n","\n","data['xz accel'] = np.sqrt(data['Acceleration x (m/s^2)']**2 + data['Acceleration z (m/s^2)']**2)\n","data.head(5)\n","\n","#Note the new column at the end of the data set called xz accel\n","\n","#Was this a good calculation based on the graphs above? Yes/No WHY?"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":270},"id":"GlAdIGeXPfZQ","executionInfo":{"status":"error","timestamp":1655498526570,"user_tz":360,"elapsed":400,"user":{"displayName":"Zach Beam","userId":"03051153181777826122"}},"outputId":"c7fa7fe9-b373-4906-8574-afccb9531e5a"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-ec2416e2ea26>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m#For Example, applying the Pythagorean Theorem to cut Acceleration y out of the work...  WHY would we do that?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'xz accel'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Acceleration x (m/s^2)'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Acceleration z (m/s^2)'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'np' is not defined"]}]},{"cell_type":"code","source":["#Graph Time vs data['Your New Column']\n","#Your code here"],"metadata":{"id":"vWHFyRAcSRL_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#OR you may need to simply make a new data set out of the existing one that has some of the data trimmed out of it.\n","#data_trim_1 is just a variabe name and can be changed, just be sure to keep it consistent.\n","\n","data_trim_1 = data.query('5 < `Time (s)` < 15') #data.query is saying look in the variable data and determine what fits your parameters in parenthesis.  Then rename this new data set data_trim_1\n","\n","#NOTE: Back ticks around the column name `Time (s)` are needed when there is a space in the name.  If the title was just Time, those would not be needed and you could use data_trim_1 = data.query('5 < Time < 15')\n","#An & sign or the word and allows multiple parameters to be added into the new data det called data_trim_1 -> data.query('`Time (s)` > 5 & `Time (s)` < 15')"],"metadata":{"id":"B_ZuUr7pP0WN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Graph your new data set\n","plt.scatter(data_trim_1['Time (s)'], data_trim_1['xz accel'], s=1, alpha =1, color='pink', edgecolor='blue') #Note the reference to the new data set data_trim_1 in the code\n","plt.xlim(5,10)\n","plt.ylim(--1, 30)\n","plt.title(\"Title\")\n","plt.xlabel(\"X-Axis (Units)\")\n","plt.ylabel(\"Y-Axis (Units)\")\n","plt.grid(False);\n","\n","#Review your plot to determine if you need to adjust your plot settings or trim your data set."],"metadata":{"id":"-m5QBf9epp6O"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["What was changed in the code to graph the new trimmed data set?\n"," - Response:\n"],"metadata":{"id":"hDuH5PcUNr4J"}},{"cell_type":"markdown","source":["##**MATH & FORMULAS!!**"],"metadata":{"id":"eSBOy2RCcy9t"}},{"cell_type":"code","source":["#The mass of the phone in this experiment was 233 grams.  Convert that to kilograms and use this along with the data collected during the Phone Slide experiment, to determine force, velocity and momentum.\n","#Mass - m (kg)\n","m = 0.233 #Is this the correct mass!?!\n","#Acceleration - a (m/s/s)\n","a = 3  #Thats not right!?!\n","#Initial Force - F (N)\n","F = m*a\n","#Time - t (s)\n","t = 4 #Really!?!\n","#Max Velocity - v (m/s)\n","v = a*t\n","#Max Momentum - p(kg*m/s)\n","p = m*v\n","\n","\n","#Python does not print values unless told to do so using the print() command.\n","#Notice how these print commands have three parts: print(\"Label\" , variable , \"unit\")\n","print(\"Mass:\" , m, \"kg\")\n","print(\"Acceleration:\", a ,\"m/s^2\")\n","print(\"Force:\", F, \"N\")\n","print(\"Max Velocity:\", v, \"m/s\")\n","print(\"Max Momentum:\", p, \"kg*m/s\")\n","\n","\n"],"metadata":{"id":"wjBSc6RgvchC","executionInfo":{"status":"ok","timestamp":1655398858760,"user_tz":360,"elapsed":390,"user":{"displayName":"Zach Beam","userId":"03051153181777826122"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"d46a47ef-4db5-415c-c800-43ce31b8ba85"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mass: 0.233 kg\n","Acceleration: 3 m/s^2\n","Force: 0.6990000000000001 N\n","Max Velocity: 12 m/s\n","Max Momentum: 2.7960000000000003 kg*m/s\n"]}]},{"cell_type":"markdown","source":["What is the force acting opposite of our push during the phone slide experiment? How strong is it?\n"],"metadata":{"id":"QkUIDxIBdofc"}},{"cell_type":"code","source":["#Your variables and formulas here\n","#Print your value"],"metadata":{"id":"Bg7ttVvabmS8"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##**Final Assessment**"],"metadata":{"id":"621IVDZLeF6c"}},{"cell_type":"markdown","source":["Write a description of the experiment using sentences and bullet points.  Use the data collected and calculated to give clear evidence about your conclusions. (Claim - Evidence - Reasoning)\n","\n"," - Response:"],"metadata":{"id":"Dsl4GB25N1XN"}},{"cell_type":"markdown","source":["#Task 2 Data Analysis"],"metadata":{"id":"EwcTDyqMjJgs"}},{"cell_type":"code","source":["#Add code and annotate as needed to clearly explain your process and thinking."],"metadata":{"id":"x2ohQCpSx_TP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"YxBWIkyfyL_W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"D5oBl7vWyMM5"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a description of the experiment using sentences and bullet points. Use the data collected and calculated to give clear evidence about your conclusions. (Claim - Evidence - Reasoning)\n","\n","Response:"],"metadata":{"id":"zBAlu-rcx_jK"}},{"cell_type":"markdown","source":["#Task 3 Data Analysis"],"metadata":{"id":"F2y-HUDyjLg6"}},{"cell_type":"code","source":["#Add code and annotate as needed to clearly explain your process and thinking."],"metadata":{"id":"8_p12g3dyAuV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"uRLgtVKeyMs5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"t5mAUq_LyMvY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a description of the experiment using sentences and bullet points. Use the data collected and calculated to give clear evidence about your conclusions. (Claim - Evidence - Reasoning)\n","\n","Response:"],"metadata":{"id":"_wf01O73yA3d"}},{"cell_type":"markdown","source":["#Task 4 Data Analysis"],"metadata":{"id":"0dp9SHKnjNgw"}},{"cell_type":"code","source":["#Add code and annotate as needed to clearly explain your process and thinking."],"metadata":{"id":"BQBax9P0yBZ7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"j662etUDyNUU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"MM3p0I27yNW6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Write a description of the experiment using sentences and bullet points. Use the data collected and calculated to give clear evidence about your conclusions. (Claim - Evidence - Reasoning)\n","\n","Response:"],"metadata":{"id":"OWzrIf9vyBg-"}},{"cell_type":"markdown","source":["#Hints and Tips: Google is your Friend!"],"metadata":{"id":"OgdlW65Olh6X"}},{"cell_type":"markdown","source":["Vectors vs Scalars!\n","\n","Use the Pythogorean Theorem:  \n","- In 2 dimensions, note the x and y components of your variable  \n"," - a<sup>2</sup> = a<sub>x</sub><sup>2</sup> + a<sub>y</sub><sup>2</sup>  \n","  \n","  \n","- In 3 dimensions, note the x, y and z components of your variable\n","  - a<sup>2</sup> = a<sub>x</sub><sup>2</sup> + a<sub>y</sub><sup>2</sup> + a<sub>z</sub><sup>2</sup>  \n","  \n","  \n","<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Coord_XYZ.svg/2000px-Coord_XYZ.svg.png\" alt=\"Drawing\" width=\"200\" height=\"200\"/>  "],"metadata":{"id":"HltfDkQw7epO"}},{"cell_type":"code","source":["#Variables allow is to assign values to labels.  You can then reference that value using the name of your variable\n","nameOfVariable = #put what you want your variable's name and what it is equal to here."],"metadata":{"id":"HxLroJTrl8Tg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Math!! - Remember PEMDAS!!!\n","+ #Add\n","- #Subtract\n","* #Multiply\n","/ #Divide\n","**2 #Square a value\n","np.sqrt() #Take the square root\n","\n"],"metadata":{"id":"lD-ViDKClrOJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Formulas\n","#To write a formula, you will need to determine your variables then write the equation using those variables from your data."],"metadata":{"id":"_2WmgZBJymqq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Remember that if you do decide to filter your data, then you will need to keep track of the new data set in your plot and calculation code.\n","# Making cuts on your data (i.e., filtering your data set)\n","data_trim_1 = data.query('px1 > 2')\n","\n","# suppose you wanted to filter for two different parameters\n","data_trim_2 = data.query('Type1 == \"G\" & Type2 == \"T\"')\n","\n","#equal to =\n","#less than <\n","#greater than >\n","#does not equal !=\n","# and &\n"],"metadata":{"id":"_-1qnCALzJJp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"hupKakyXzP6S"},"execution_count":null,"outputs":[]}]}