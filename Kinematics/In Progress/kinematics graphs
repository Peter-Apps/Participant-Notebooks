{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"10PXy8FRkLuk7E9IRp4LB7rX_SF70ampc","timestamp":1694384787994},{"file_id":"1QKR1OTopgX_-t9-HSgJWGGyyP-U9TaQz","timestamp":1655821863836}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["TEACHER NOTES:\n","The purpose of this activity is to have students discover what quantities are represented by the slopes and intercepts on position vs. time and velocity vs. time graphs. Students will acheive this by making manipulations to the initial position, initial velocity and acceleration of an object's simulated motion. In the process of completing this activity students will get some exposure to code and will hopfeully gain an interest in learnig how to write thier own programs.\n","\n","This activity is designed to be implemented in the explore part of the 5E lesson sequence. Students should have a conceptual knowledge of position, velocity and acceleration but do not need to have experience working with the formulas or graphing these quantities. Immediately preceeeding this activity students should be engaged by some activity that results in their understanding of these three quantities. Upon the completion of this activity the instructor should explain what students were supposed to learn by reviewing the answers to the questions students are submitting. Once the explanation part of the lesson sequence is completed, students should have an opportunity to elaborate on their understanding by writing descriptions for the motion of objects given various motion graphs. They should also do the reverse by constructing their own motion graphs given a description of an objects motion. Finally, student understanding should be evaluated by completing an assessment which asks them to do the same things they did in the elaboration part of the lesson sequence."],"metadata":{"id":"CZZX61HvdNQT"}},{"cell_type":"markdown","source":["INTRODUCTION\n","\n","In this activity we will be analyzing graphs which show an object's position and velocity over time. We will be changing the intial values of the object's position and velocity and discover how the changes affects these graphs. After this activity we should be able to make connections betweeen the properties of the graphs and the initial values we are tasked to change. We will not learn to how write code in this activity. However, we will gain some familiarity with the code after manipulting an analyzing the program below.\n","\n","Before we begin we should review the basics of graphed lines. There are two relevant quantities we should be familiar with before proceeding. The first is the [y-intercept](https://www.mathsisfun.com/y_intercept.html) of a graphed line and the second is its [slope](https://www.mathsisfun.com/gradient.html). Click these links and review these concepts. These resources are limited to graphed lines that are straight and have a constant slope. We will be exploring these and lines which are not straight because their slope changes.\n","\n","We also need to understand the significance of an x-intercept. In the position vs. time graphs an x-intercept shows when our object is at our **reference point**. Recall that all positions are defined relative to some other location (often where an observer is located). If the y-coordinate is equal to zero then there is no space between the object and the reference point so it is at that location. In velocity vs. time graphs, x-intercepts show when the object's velocity is equal to zero (relative to the refernce point) since the amount of space between an object and the reference point is constant."],"metadata":{"id":"HyC_CMlIxX2Q"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u8Ab_6AwTc_y","executionInfo":{"status":"ok","timestamp":1655501518814,"user_tz":420,"elapsed":268,"user":{"displayName":"Dave Bates","userId":"03643962742318734303"}},"outputId":"eb39e6fd-1944-4130-b876-f6a5bd053124"},"outputs":[{"output_type":"stream","name":"stdout","text":[" time  position  velocity\n","    0      -4.0        -2\n","    1      -5.0         0\n","    2      -4.0         2\n","    3      -1.0         4\n","    4       4.0         6\n","    5      11.0         8\n"]}],"source":["#imports necessary resources\n","import pandas as pd\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","\n","#sets initial and final time values along with the interval of time change\n","INITIAL_TIME = 0\n","MAX_TIME = 5\n","TIME_INTERVAL = 1\n","\n","#these are the values students will be manipulating\n","INITIAL_POSITION = -4\n","INITIAL_VELOCITY = -2\n","ACCELERATION = 2\n","\n","#sets values which may change\n","time = INITIAL_TIME\n","position = INITIAL_POSITION\n","velocity = INITIAL_VELOCITY\n","\n","#creates lists to hold variable values and appends intital values to each list\n","times = []\n","times.append(time)\n","positions = []\n","positions.append(position)\n","velocities = []\n","velocities.append(velocity)\n","\n","#function which updates time value\n","def update_time(time):\n","  next_time = round(INITIAL_TIME + time + TIME_INTERVAL, 2)\n","  return next_time\n","\n","#function which updates position value\n","def update_position(time):\n","  next_position = round(0.5*ACCELERATION*time**2 + INITIAL_VELOCITY * time + INITIAL_POSITION, 2)\n","  return next_position\n","\n","#function which updates velocity value\n","def update_velocity(time):\n","  next_velocity = round(INITIAL_VELOCITY + ACCELERATION * time, 2)\n","  return next_velocity\n","\n","#loop that updates values for some time interval given initial values\n","while time < MAX_TIME:\n","  time = update_time(time)\n","  times.append(time)\n","  position = update_position(time)\n","  positions.append(position)\n","  velocity = update_velocity(time)\n","  velocities.append(velocity)\n","\n","#creates and prints data table showing the values of times, postions, and velocities\n","data = pd.DataFrame({\"time\": times, \"position\": positions, \"velocity\": velocities})\n","print(data.to_string(index=False))"]},{"cell_type":"code","source":["#Shows how mch the values change from row to row\n","print(data.diff().to_string(index=False))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CbpqRWDz7Jjx","executionInfo":{"status":"ok","timestamp":1655501519147,"user_tz":420,"elapsed":9,"user":{"displayName":"Dave Bates","userId":"03643962742318734303"}},"outputId":"82caaa5c-7ef9-4561-b8b9-6571b99df1fe"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" time  position  velocity\n","  NaN       NaN       NaN\n","  1.0      -1.0       2.0\n","  1.0       1.0       2.0\n","  1.0       3.0       2.0\n","  1.0       5.0       2.0\n","  1.0       7.0       2.0\n"]}]},{"cell_type":"code","source":["#Plots a line of the object's position over time\n","plt.plot(data['time'],data['position'],linestyle='--', marker='.', color='k', markersize=10)\n","plt.grid()\n","plt.xlabel('time')\n","plt.ylabel('position')\n","plt.title('position vs. time')\n","plt.ylim([min(positions), max(positions)+1])\n","plt.yticks(range(int(0 - max(positions)), int(max(positions) + 1), 1))\n","plt.xlim([INITIAL_TIME, time])\n","plt.xticks(range(int(INITIAL_TIME), int(time + 1), 1));"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"R66mgzDNThyB","executionInfo":{"status":"ok","timestamp":1655501519569,"user_tz":420,"elapsed":429,"user":{"displayName":"Dave Bates","userId":"03643962742318734303"}},"outputId":"1c589f11-42e1-4992-f3c8-f75b6203ed44"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Calculates the slope and y-intercept of the position vs. time graph\n","slope, y_intercept = np.polyfit(times,positions,1)\n","print(\"The slope of this line is\", round(slope, 1) + 0)\n","print(\"The y-intercept of this line is\", round(y_intercept, 1) + 0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tUOOuVTR4es-","executionInfo":{"status":"ok","timestamp":1655501519577,"user_tz":420,"elapsed":89,"user":{"displayName":"Dave Bates","userId":"03643962742318734303"}},"outputId":"176c1578-7a01-430a-8147-433590677bc2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The slope of this line is 3.0\n","The y-intercept of this line is -7.3\n"]}]},{"cell_type":"code","source":["#Plots a line of the object's position over time\n","plt.plot(data['time'],data['velocity'],linestyle='--', marker='.', color='k', markersize=10)\n","plt.grid()\n","plt.xlabel('time')\n","plt.ylabel('velocity')\n","plt.title('velocity vs. time')\n","plt.ylim([min(velocities), max(velocities)+1])\n","plt.yticks(range(int(-1 - max(velocities)), int(max(velocities) + 2), 1))\n","plt.xlim([INITIAL_TIME, time])\n","plt.xticks(range(int(INITIAL_TIME), int(time + 1), 1));"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"T65iyZ2eUpUV","executionInfo":{"status":"ok","timestamp":1655501519579,"user_tz":420,"elapsed":78,"user":{"displayName":"Dave Bates","userId":"03643962742318734303"}},"outputId":"ff4825d2-2414-4029-e101-5b5930c913cd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#Calculates the slope and y-intercept of the velocity vs. time graph\n","slope, y_intercept = np.polyfit(times,velocities,1)\n","print(\"The slope of this line is\", round(slope, 1) + 0)\n","print(\"The y-intercept of this line is\", round(y_intercept, 1) + 0)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7BldkZBm4t2s","executionInfo":{"status":"ok","timestamp":1655501519580,"user_tz":420,"elapsed":78,"user":{"displayName":"Dave Bates","userId":"03643962742318734303"}},"outputId":"c9bddcef-1d29-4db5-e0a1-c4120318a8dc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The slope of this line is 2.0\n","The y-intercept of this line is -2.0\n"]}]},{"cell_type":"markdown","source":["Directions & (Questions)\n","1. Run program above by pressing the play button in the upper left of each box containing code and analyze the output shown below each block of code.\n","\n","2. Right click and save both graphs produced by this program and insert them into the document you are submitting in a location near the answer to any question related to these graphs.\n","\n","3. How does this object's position change over time? (1)\n","\n","4. Change this object's initial position by replacing the zero on line 13 in the first block of code with a four then repeat steps 1 and 2.\n","\n","5. What property of the position vs. time graph represents the objet's initial position? (2)\n","\n","6. Change this object's initial velocity by replacing the one on line 14 in the first block of code with a two then repeat steps 1 and 2.\n","\n","7. How does this object's velocity change over time? (3)\n","\n","8. What property of the position vs. time graph represents the objet's velocity? (4)\n","\n","9. Change this object's initial position by replacing the four on line 13 in the first block of code with a negative four then repeat steps 1 and 2.\n","\n","10. At what time was this object at the reference point? (5)\n","\n","11. Change this object's accleration by replacing the zero on line 15 in the first block of code with a one.\n","\n","13. How does the slope of position vs. time graph change over time? (6)\n","\n","12. Change this object's initial position by changing the negative four on line 13 in the first block of code back to positive four then repeat steps 1 and 2.\n","\n","14. How does this object's velocity change over time? (7)\n","\n","15. Change this object's initial velocity by replacing the two on line 14 in the first block of code with a negative two then repeat steps 1 and 2.\n","\n","16. What property of the velocity vs. time graph represents the object's initial velocity. (8)\n","\n","17. Change this object's initial velocity by replacing the negative two on line 14 in the first block of code with a negative three then repeat steps 1 and 2.\n","\n","18. At what time what this object not moving? (9)\n","\n","19. Change this object's accleration by replacing the one on line 15 in the first block of code with a two.\n","\n","20. What property of the velocity vs. time graph represents the object's acceleration. (10)"],"metadata":{"id":"147lzYO9yKrB"}},{"cell_type":"markdown","source":["ANSWERS TO QUESTIONS\n","\n","1. The objects is moving further from the reference point.\n","\n","2. The initial position is represented by the y-intercept on a position vs. time graph.\n","\n","3. This object's velocity remains constant over time.\n","\n","4. The slope of a position vs. time graph represents an object's velocity.\n","\n","5. This object was at the reference point after two seconds of motion.\n","\n","6. Over time the slope of the position vs. time graph increases.\n","\n","7. Over time this object's velocity is incresing.\n","\n","8. The initial velocity of an object is represented by the y-intercept on a velocity vs. time graph.\n","\n","9. This object came to a stop after 3 seconds of time.\n","\n","10. The slope of the line an a velocity vs. time graph represents an object's acceleration."],"metadata":{"id":"umqQzQMxNCEw"}}]}