{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"},"colab":{"provenance":[{"file_id":"1Qqm8bYiDgrv88yhF3vsws06Hx6f0KwAw","timestamp":1694386656134},{"file_id":"1S6f8IhHEw9_EgTQDwLh6BSfJqQU3LIk5","timestamp":1594337625848}]}},"cells":[{"cell_type":"code","metadata":{"id":"j1U2Eg-Q9vQy"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3aQZjntsK9tm"},"source":["# Lab 4: Dynamics of a Rolling Cart\n","\n","Your task is to:\n","\n","- import your .csv file from the Capstone software used in lab,\n","- use coding to aid with your calculations, and\n","- generate a graph of the total mass times horizontal acceleration vs. the mass accelerated by gravity\n","  \n","$$ (M{1} + M{2})a = g M{2}- f$$\n","- determine your experimental value for g and compare to accepted value\n","- determine the value of rolling friction for your rolling cart\n","- add inline comments and or markdown cells to describe your steps  \n"]},{"cell_type":"markdown","metadata":{"id":"xlhs-XqwWz74"},"source":[]},{"cell_type":"code","metadata":{"id":"gPgYRBRPK9to"},"source":["# import some helpful software packages.\n","import pandas as pd\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fQUS-XiktIrX"},"source":[],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U8Fp8rbMtPU-"},"source":["# import data from Capstone that you will use for calculations.\n","#Is the file on this desktop? You can use the code below. Pay attention to the exact file name\n","from google.colab import files\n","data = files.upload() #this selected file needs to match the one below.\n","\n","import io\n","# this name (whatever you called it.csv) needs to be the same as the one you selected to import from above.\n","#data = pd.read_csv(io.BytesIO(data['Dynamics_Coaster.csv']))\n","data = pd.read_csv(io.BytesIO(localdata['Dynamics_Cart_.csv']))\n","\n","data.head(5)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xiWiyeqPCHWz","colab":{"base_uri":"https://localhost:8080/","height":196},"executionInfo":{"status":"ok","timestamp":1594417344503,"user_tz":300,"elapsed":202,"user":{"displayName":"janee hall","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh7PFV_4FuX3oaOZUD5RrDTg1O6crH0vjwWYpqiwg=s64","userId":"10154214953922690814"}},"outputId":"84af7a53-bff3-43a4-8f62-91be442708b9"},"source":["# Our goal is to graph (M1 + M2)a  in Newtons vs. M2 in kg\n","# You will need to add some columns to your data table to assist you with your graph\n","# create a column that will calculate the values you need for your graph\n","#You must fill in some blanks in the code below and use your value for M1 in place of the placeholder\n","M1 = .509 + .500 # Use the mass values you measured for the cart and bar mass converted to kg to define M1\n","localdata ['(M1 + M2)*a'] = (M1 + localdata ['M2 in kg']) * localdata['Acceleration in m/s2']\n","localdata.head(5)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Trial #</th>\n","      <th>M2 in kg</th>\n","      <th>Acceleration in m/s2</th>\n","      <th>(M1 + M2)*a</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1a</td>\n","      <td>0.015</td>\n","      <td>0.0219</td>\n","      <td>0.022426</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1b</td>\n","      <td>0.015</td>\n","      <td>0.0218</td>\n","      <td>0.022323</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1c</td>\n","      <td>0.015</td>\n","      <td>0.0219</td>\n","      <td>0.022426</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2a</td>\n","      <td>0.020</td>\n","      <td>0.0674</td>\n","      <td>0.069355</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2b</td>\n","      <td>0.020</td>\n","      <td>0.0673</td>\n","      <td>0.069252</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Trial #  M2 in kg  Acceleration in m/s2  (M1 + M2)*a\n","0      1a     0.015                0.0219     0.022426\n","1      1b     0.015                0.0218     0.022323\n","2      1c     0.015                0.0219     0.022426\n","3      2a     0.020                0.0674     0.069355\n","4      2b     0.020                0.0673     0.069252"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"7RBWz56KFfyx","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1594417507799,"user_tz":300,"elapsed":289,"user":{"displayName":"janee hall","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh7PFV_4FuX3oaOZUD5RrDTg1O6crH0vjwWYpqiwg=s64","userId":"10154214953922690814"}},"outputId":"b0c15327-e283-45de-f365-18df39fd0bd0"},"source":["# Our objective with the graph is to determine the value of g using the relationship given in the introduction.\n","# Use comments to document which values you will graph on the x- and y-axes.\n","# g is in m/s2 so I want N divided by kg; I'll put (M1 + M2)a in Newtons on the y-axis and M2 in kg on the x-axis\n","# This will result in the correct units for g\n","# Set up the graph using the code below with the correct information.\n","plt.plot(localdata['M2 in kg'],localdata['(M1 + M2)*a'],linestyle='--', marker='x', color='b', markersize=5)\n","plt.xlabel('M2 in kg')\n","plt.ylabel('(M1 + M2)a in Newtons')\n","plt.title('(M1 + M2) a vs. M2')\n","#Please include a grid\n","plt.axis([0, .055, 0, .4]) #Your graph will look spiffy if you choose sensibly\n","plt.show()\n"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"YATgwzaFVpPF","colab":{"base_uri":"https://localhost:8080/","height":33},"executionInfo":{"status":"ok","timestamp":1594411783881,"user_tz":300,"elapsed":211,"user":{"displayName":"janee hall","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gh7PFV_4FuX3oaOZUD5RrDTg1O6crH0vjwWYpqiwg=s64","userId":"10154214953922690814"}},"outputId":"1be91e30-f248-4c33-8859-3b90fefcd4b5"},"source":["\n","np.polyfit(localdata['M2 in kg'],localdata['(M1 + M2)a'], deg=1)\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 9.78802667, -0.12910631])"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"WpMDtWNsFeD2"},"source":["#Compare your experimental value for g with the  accepted value, 9.81 m/s2"],"execution_count":null,"outputs":[]}]}