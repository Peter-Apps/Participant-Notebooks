{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1tKVbN0nmv8R8Apb4kq40N6S-5C7N7qGj","timestamp":1694385406533},{"file_id":"1deGNAHa9LDPayf_TLI1l1xvup5ehzUeI","timestamp":1626091950716}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"SeGijyzWlTkt"},"source":["# **Motion Graphs Objectives**\n","\n","1.  The student should be able to analyze the motion of the object by observing the position-time graphs.\n","\n","2.  The student should be able to observe the calulations of components of velocity of the projectile and analyze the velocity-time graphs.\n","\n","# **Part one Position Time Graphs with the defined values**\n","The code below sets values for some parameteters like initial posiotion, initial velocity and acceleration and generates position-time graphs.\n"," Re-run the code to make sure your like your edits.\n","These coefficients can be used to predict the motion using the position function. The position function is a quadratic equation that predicts the position of an object:\n","洧논洧녭=洧논洧녰+洧녺洧녰洧노+12洧녩洧노2\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"ppSjeOV9u-zX"},"source":["# this cell only needs to be run once, but re-exectuing it doesn't hurt anything either\n","# imports software packages (not too exciting)\n","import pandas as pd\n","import numpy as np\n","%matplotlib inline\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"l2a0L0hoo0d5"},"source":["# **Part one -A**\n","Accelerated motion\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LACOYZzKvAhS","executionInfo":{"status":"ok","timestamp":1624566242659,"user_tz":300,"elapsed":139,"user":{"displayName":"SG","photoUrl":"","userId":"15364970028296411338"}},"outputId":"c25523ef-ff26-4004-a21b-8f8e314a5fb7"},"source":["# This sets the values for the initial position, initial velocity and acceleration and then prints the values with units.\n","xi = 1\n","vi = 0\n","a = 3\n","print(\"initial position =\", xi, \"m\")\n","print(\"initial velocity =\", vi, \"m/s\")\n","print(\"acceleration =\", a, \"m/s/s\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["initial position = 1 m\n","initial velocity = 0 m/s\n","acceleration = 3 m/s/s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"GkC4r6P_wGNK"},"source":["# Poistion-time graph when the object is accelerating\n","# this cell only needs to be run once, but re-exectuing it doesn't hurt anything either\n","# imports software packages (not too exciting)\n","# makes an empty position/time data set\n","time_list = []\n","position_list = []\n","t = 0               # sets a starting value for time\n","\n","while (t < 21):                  # runs the 4 lines below until time is not < 21\n","    time_list.append(t)          # saves the time value\n","    xf = xi + vi*t + .5*a*t**2   # calculates xf\n","    position_list.append(xf)     # saves xf as the position value\n","    t = t + 0.5                  # t value is incrased by 0.5. Here the positon is calculated for every 0.5 seconds.\n","\n","#   this creates a scatterplot: plt.scatter(x-variable, y-variable)\n","plt.scatter(time_list, position_list)\n","plt.title(\"Position vs time graph\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Position\");"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"sfcX0z3Cnfpv"},"source":["Questions\n","\n","\n","*   Describe the motion of the object in terms of direction, velocity and acceleration.\n","*   How does the graph help in finding the velocity?\n","\n"]},{"cell_type":"markdown","metadata":{"id":"5kNXLlTNpArT"},"source":["# **Part one -B**\n","Object is not moving or at rest"]},{"cell_type":"code","metadata":{"id":"aGTADbChxJSU"},"source":["# Poistion-time graph when the object is not moving ( at rest)\n","# this cell only needs to be run once, but re-exectuing it doesn't hurt anything either\n","# imports software packages (not too exciting)\n","# makes an empty position/time data set\n","time_list = []\n","position_list = []\n","t = 0               # sets a starting value for time\n","\n","while (t < 21):                  # runs the 4 lines below until time is not < 21\n","    time_list.append(t)          # saves the time value\n","    xf = xi                      # calculates xf\n","    position_list.append(xf)     # saves xf as the position value\n","    t = t + 0.5                  # t value is incrased by 0.5. Here the positon is calculated for every 0.5 seconds.\n","\n","#   this creates a scatterplot: plt.scatter(x-variable, y-variable)\n","plt.scatter(time_list, position_list)\n","plt.title(\"Position vs time graph\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Position\");"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e6KHYkQLoZwv"},"source":["Questions\n","\n","*   Describe the motion of the object in terms of direction, velocity and acceleration.\n"]},{"cell_type":"markdown","metadata":{"id":"m1wRblAQpMKu"},"source":["# **Part one - C**\n","Object is moving with a cosntant positve velocity."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uCZtkF6jwKlN","executionInfo":{"status":"ok","timestamp":1624566243206,"user_tz":300,"elapsed":5,"user":{"displayName":"SG","photoUrl":"","userId":"15364970028296411338"}},"outputId":"c3b13760-534b-46dc-94a1-13c482890a09"},"source":["# this sets the values for initial position, initial velocity and acceleration and then prints the values with units.\n","xi = 1\n","vi = 5\n","a = 0\n","print(\"initial position =\", xi, \"m\")\n","print(\"initial velocity =\", vi, \"m/s\")\n","print(\"acceleration =\", a, \"m/s/s\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["initial position = 1 m\n","initial velocity = 5 m/s\n","acceleration = 0 m/s/s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YQpRiX1Dwc5i"},"source":["# Poistion-time graph when the object is moving with constant velocity in the positve direction/forward ( zero acceleration)\n","#this cell only needs to be run once, but re-exectuing it doesn't hurt anything either\n","# imports software packages (not too exciting)\n","# makes an empty position/time data set\n","time_list = []\n","position_list = []\n","t = 0               # sets a starting value for time\n","\n","while (t < 21):                  # runs the 4 lines below until time is not < 21\n","    time_list.append(t)          # saves the time value\n","    xf = xi + vi*t               # calculates xf ( a=0)\n","    position_list.append(xf)     # saves xf as the position value\n","    t = t + 0.5                  # t value is incrased by 0.5. Here the positon is calculated for every 0.5 seconds.\n","\n","\n","#   this creates a scatterplot: plt.scatter(x-variable, y-variable)\n","plt.scatter(time_list, position_list)\n","plt.title(\"Position vs time graph\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Position\");"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AVZD7rOhpUOS"},"source":["Questions\n","\n","*   Describe the motion of the object in terms of direction, velocity and acceleration.\n","*   What does the slope of the graph represent?\n","*  Model the graph to have a velocity 10 m/s\n","*   Model the graph to change the direction of the object.\n","*   Model the graph to have some acceleration.\n","\n","\n","\n","\n","\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"g6fL0NfIpXxx"},"source":["# **Part one- D**\n","Object is moving with a constant negative velocity"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":232},"id":"04dVH7t7wWbw","executionInfo":{"status":"error","timestamp":1624649547517,"user_tz":300,"elapsed":448,"user":{"displayName":"SG","photoUrl":"","userId":"15364970028296411338"}},"outputId":"db6353cb-4bae-491f-8dfc-0fd580a684ac"},"source":["# Poistion-time graph when the object is moving with constant velocity in the negative direction/backward ( zero acceleration)\n","# this cell only needs to be run once, but re-exectuing it doesn't hurt anything either\n","# imports software packages (not too exciting)\n","# makes an empty position/time data set\n","time_list = []\n","position_list = []\n","t = 0               # sets a starting value for time\n","\n","while (t < 21):                  # runs the 4 lines below until time is not < 21\n","    time_list.append(t)          # saves the time value\n","    xf = xi - vi*t + .5*a*t**2   # calculates xf\n","    position_list.append(xf)     # saves xf as the position value\n","    t = t + 0.5                  # t value is incrased by 0.5. Here the positon is calculated for every 0.5 seconds.\n","\n","#   this creates a scatterplot: plt.scatter(x-variable, y-variable)\n","plt.scatter(time_list, position_list)\n","plt.title(\"Position vs time graph\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Position\");"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-54187791d6b1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m21\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m                  \u001b[0;31m# runs the 4 lines below until time is not < 21\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mtime_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m          \u001b[0;31m# saves the time value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mxf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxi\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mvi\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mt\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m.5\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m   \u001b[0;31m# calculates xf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m     \u001b[0mposition_list\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxf\u001b[0m\u001b[0;34m)\u001b[0m     \u001b[0;31m# saves xf as the position value\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m0.5\u001b[0m                  \u001b[0;31m# t value is incrased by 0.5. Here the positon is calculated for every 0.5 seconds.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'xi' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"cZSt6FuJptb4"},"source":["Questions\n","\n","*   Describe the motion of the object in terms of direction, velocity and acceleration.\n","*   What does the slope of the graph represent?\n","*  Model the graph to have a velocity 10 m/s\n","*   Model the graph to change the direction of the object.\n","*   Model the graph to have some acceleration.\n"]},{"cell_type":"markdown","metadata":{"id":"xjhzsqIrpjTP"},"source":["# **Part one -E**\n","Position -time graph of a projectile.\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AlYd9AHOEwI-","executionInfo":{"status":"ok","timestamp":1624566243682,"user_tz":300,"elapsed":143,"user":{"displayName":"SG","photoUrl":"","userId":"15364970028296411338"}},"outputId":"4d08d13d-59bf-471a-bb31-9148f69e98e2"},"source":["# this sets the coefficients\n","xi = 0\n","vi = 40\n","a = 10\n","print(\"initial position =\", xi, \"m\")\n","print(\"initial velocity =\", vi, \"m/s\")\n","print(\"acceleration =\", a, \"m/s/s\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["initial position = 0 m\n","initial velocity = 40 m/s\n","acceleration = 10 m/s/s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uB9_xlP-E429"},"source":["# # Poistion-time graph of a projectile\n","#this cell only needs to be run once, but re-exectuing it doesn't hurt anything either\n","# imports software packages (not too exciting)\n","# makes an empty position/time data set\n","time_list = []\n","position_list = []\n","t=0\n","while (t < 9):                         # runs the 4 lines below until time is not < 9\n","    time_list.append(t)                # saves the time value\n","    vf=vi-(a*t)\n","    xf = (vi**2+(2*a*xi)-(vf**2))/2*a  # calculates xf\n","    position_list.append(xf)           # saves xf as the position value\n","    t = t + 0.5                        # t value is incrased by 0.5. Here the positon is calculated for every 0.5 seconds.\n","\n","#   this creates a scatterplot: plt.scatter(x-variable, y-variable)\n","plt.scatter(time_list, position_list)\n","plt.title(\"Position vs time graph\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Position\");"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"06eJfNrKqSy0"},"source":["Questions\n","\n","* Describe the motion of the object in terms of direction, velocity and acceleration.\n"]},{"cell_type":"markdown","metadata":{"id":"LlDpDi1ZpxuE"},"source":["# **Part Two 2D projectiles**\n","The code below tales values for some parameteters like initial posiotion, initial velocity and angle. The student needs to eneter all the three values, then the code calculates components of velocity and generates velocity-time graphs.\n","As an extention, students read a Kinematics problem and enter the given information in the code."]},{"cell_type":"code","metadata":{"id":"w2CoQ9_WfIUi"},"source":["# Takes the input values for the 2d projectile from the user, calulates initial vertical and horizontal velocities and generates velocity-time graphs.\n","xi = input(\"Enter a value for initial posiiton: \")\n","xi = int(xi) # converts in to integer value\n","vi = input(\"Enter a value for initial velocity: \")\n","vi = int(vi) # converts in to integer value\n","a = input(\"Enter a value for the angle: \")\n","a = int(a)  # converts in to integer value\n","g =10\n","import math\n","theta = math.radians(a)\n","vix=vi*math.cos(theta)\n","viy=vi*math.sin(theta)\n","print(\"initial position =\", xi, \"m\")\n","print(\"initial velocity =\", vi, \"m/s\")\n","print(\"acceleration =\", g, \"m/s/s\")\n","print(\"the angle =\", theta, \"degrees\")\n","print(\"the horizontal velocity=\", vix)\n","print(\"the vertical velocity=\", viy)\n","time_list = []\n","position_list_x = []\n","position_list_y = []\n","t=0\n","while (t < 12):                  # runs the 4 lines below until time is not < 12\n","    time_list.append(t)          # saves the time value\n","    vfy=viy-(g*t)                # calculates final vertical velocity until time is 12 seconds\n","    vfx=vix                      # calculates final horizontal velocity\n","    position_list_y.append(vfy)  # saves vfy as the position value\n","    position_list_x.append(vfx)  # saves v\n","    t = t + 0.5\n","#   this creates a scatterplot: plt.scatter(x-variable, y-variable)\n","plt.scatter(time_list, position_list_y, label= \"Vertical velocity\")\n","plt.scatter(time_list, position_list_x, label= \"Horizontal velocity\")\n","plt.ylim(-80, 80)\n","plt.xscale(\"linear\")\n","plt.yscale(\"linear\")\n","plt.title(\"variation of velocity with time\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Velocity\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6vNA9QQSrkQN"},"source":["Questions\n","\n","*   How do you find the acceleration due to gravity value from the above graph(s)?\n","*   What are the differences between the two velociities in the graph?\n","*   Why the horizontal velocity has no slope?\n"]},{"cell_type":"markdown","metadata":{"id":"U-WhoVtOqovA"},"source":["# **Part Three Position Time Graphs with the given values**\n","The code below tales values for some parameteters like initial posiotion, initial velocity and acceleration.  The student needs to eneter all the three values, then the code generates the posiiton-time graph that matches with the given information.\n","As an extention, students read a Kinematics problem and enter the given information in the code."]},{"cell_type":"code","metadata":{"id":"kU-LrOmgP9l6"},"source":["xi = input(\"Enter a value for initial posiiton: \")\n","xi = int(xi)\n","vi = input(\"Enter a value for initial velocity: \")\n","vi = int(vi)\n","a = input(\"Enter a value for acceleration: \")\n","a = int(a)\n","time_list = []\n","position_list = []\n","t = 0\n","# sets a starting value for time\n","\n","while (t < 21):                  # runs the 4 lines below until time is not < 21\n","    time_list.append(t)          # saves the time value\n","    xf = xi + vi*t + .5*a*t**2   # calculates xf\n","    position_list.append(xf)     # saves xf as the position value\n","    t = t + 0.5\n","\n","#   this creates a scatterplot: plt.scatter(x-variable, y-variable)\n","plt.scatter(time_list, position_list)\n","plt.title(\"Position vs time graph\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Position\");"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"nZ66uvdR46ta"},"source":["# **Part Four Velocity Time Graphs**\n","\n","Velocity Time Graphs"]},{"cell_type":"code","metadata":{"id":"04wGdGOz5LTg"},"source":["#\n","vi = input(\"Enter a value for initial velocity: \")\n","vi = int(vi)\n","a = input(\"Enter a value for acceleration: \")\n","a = int(a)\n","time_list = []\n","position_list = []\n","t = 0\n","# sets a starting value for time\n","\n","while (t < 21):                  # runs the 4 lines below until time is not < 21\n","    time_list.append(t)          # saves the time value\n","    vf=vi+a*t                    # calculates vf\n","    position_list.append(vf)     # saves vf as the position value\n","    t = t + 0.5\n","\n","#   this creates a scatterplot: plt.scatter(x-variable, y-variable)\n","plt.scatter(time_list, position_list)\n","plt.title(\"Velocity vs time graph\")\n","plt.xlabel(\"Time\")\n","plt.ylabel(\"Velocity\");"],"execution_count":null,"outputs":[]}]}