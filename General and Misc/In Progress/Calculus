{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1YljzD-qXHslvZhwA2V3JbBzp-jY9jv4o","timestamp":1694385045368},{"file_id":"1O_2NIvQPNoNPb2HVKiw0PyLN5BBS13UI","timestamp":1655821686211},{"file_id":"1HiTiIUPmUa8NgWKh--yox_LDIkbZm0R6","timestamp":1655377901083}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["[Implementation Plan and Teacher Notes](https://drive.google.com/file/d/1dzbgzc_mLnRhFyvpBLQBYDCh3XkWoHuB/view?usp=sharingps://)"],"metadata":{"id":"bp2xS1du8egF"}},{"cell_type":"markdown","source":["# **PART ONE:  FORWARD DIFFERENCE METHOD**"],"metadata":{"id":"Ct8Io7wnIixo"}},{"cell_type":"markdown","source":["We are going to use Python to do some calculus work for us.  The first algorithm we will try is called the Forward Difference Method.  Read through the code and then click on the \"run\" circle to the left."],"metadata":{"id":"n64Qoj5F_66T"}},{"cell_type":"code","source":["import numpy\n","\n","def fct(x):\n","    return numpy.sin(x)\n","\n","def fct2(x):\n","    return x**2 + x\n","\n","def forward (f, t, h):\n","    return ((f(t+h) - f(t)) / h)\n","\n","result1 = forward(fct,numpy.pi,1e-10)\n","print(result1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dxh6h8j5_9mQ","executionInfo":{"status":"ok","timestamp":1655494723861,"user_tz":240,"elapsed":18,"user":{"displayName":"Amber Morgan","userId":"07044629795572760366"}},"outputId":"53d2ca8f-7e09-4a05-94c9-232531c8cd9f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-1.000000082740371\n"]}]},{"cell_type":"markdown","source":["If you're not sure what you just found, try changing the value of t in your forward function call.  Instead of putting in terms of pi, you can put in numerical values as well."],"metadata":{"id":"MJccWIELDBql"}},{"cell_type":"code","source":["result2 = forward(fct,{YOU INPUT},1e-10)\n","print(result2)"],"metadata":{"id":"WhxQP8BqDyXv","executionInfo":{"status":"error","timestamp":1655494724261,"user_tz":240,"elapsed":414,"user":{"displayName":"Amber Morgan","userId":"07044629795572760366"}},"outputId":"d94cf4f9-bda8-4d4a-d92c-53ab2720b052","colab":{"base_uri":"https://localhost:8080/","height":131}},"execution_count":null,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-716470e5017a>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    result2 = forward(fct,{YOU INPUT},1e-10)\u001b[0m\n\u001b[0m                                   ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"markdown","source":["Now try changing the value of h.  Notice it is 1 x 10^-10 to start with -- that's really small! -- so see what happens when you change this.    "],"metadata":{"id":"M-5myNe8EWhE"}},{"cell_type":"code","source":["result3 = forward(fct,numpy.pi,{YOU INPUT})\n","print(result3)"],"metadata":{"id":"iK7B6z9EFejn"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["We've been using the sine function (calling fct(value) returns sine of that value) so now try calling the forward difference function for fct2 (function 2).  "],"metadata":{"id":"WB45fQ7yFm-y"}},{"cell_type":"code","source":["result4 = forward(fct2,1,1e-10)\n","print(result4)"],"metadata":{"id":"z-lpCs9ZGVjc"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Try changing the inputs for t and h in the forward function call for fct2."],"metadata":{"id":"IcnM8VkBGfd4"}},{"cell_type":"code","source":["result5 = forward(fct2,{YOU INPUT},{YOU INPUT})\n","print(result5)"],"metadata":{"id":"rm4aI0DVGwGt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Finally, try defining a fct3 of your own and applying the foward difference method for that function at a few different points.  Use a polynomial function for now."],"metadata":{"id":"-kcHeR9pG9l2"}},{"cell_type":"code","source":["def fct3(x):\n","    return {YOU INPUT}\n","\n","\n","result6 = forward(fct3,{YOU INPUT},{YOU INPUT})\n","print(result6)"],"metadata":{"id":"yD7IkkMuHa_w"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["In your response document, under part one, briefly explain what 't' and 'h' are and what changes them does to your result.  Explain what the forward difference function is doing (think in terms of calculus relationships)."],"metadata":{"id":"zYAvRNWDHyaM"}},{"cell_type":"markdown","source":["#  **Part Two:  Foward Euler Method (AKA Explicit Euler Method)**"],"metadata":{"id":"gxpvGFS2Ie39"}},{"cell_type":"markdown","source":["In the next section, we're going to use what is called the forward Euler method to determine the position of an object under constant acceleration.  Read through the code carefully.  First, answer the following:\n","\n","*   How long is the object moving under this acceleration?\n","*   What is the initial velocity of the object?\n","*   What is the initial position of the object?\n","\n","Answer the above questions in your response document under part 2.  Given what you know about the kinematic relationships, what is the Forward Euler method doing to get velocity and position from acceleration data?  \n"],"metadata":{"id":"QBntgNNKOvgg"}},{"cell_type":"code","source":["from pylab import *\n","import matplotlib\n","matplotlib.use(\"Agg\")\n","import matplotlib.pyplot as plt\n","\n","\n","a = 10.0     # constant acceleration of 10 m/s2\n","dt = 0.5    #  0.5 second timestep\n","total_time = 20.0 #set total time of motion to 20 seconds\n","N = int(total_time/dt)     # number of points in arrays (lists of numbers)\n","v0 = 0.0    # initial velocity\n","x0 = 0.0    # initial position\n","\n","# first, set up variables and almost-empty arrays to hold our answers:\n","t = 0\n","x = x0\n","v = v0\n","\n","\n","time = array([0])       # initial value of time is 0 seconds\n","position = array([x0])    # initial height is x0\n","velocity = array([v0])  # initial velocity is v0\n","# Note that 't', 'x' and 'v' are the current time, position and velocity, but\n","# 'time', 'height' and 'velocity' are arrays\n","\n","# Now let's use Euler's method to find the position and velocity.\n","for j in range(N):\n","    t = t + dt\n","    x = x + v * dt\n","    v = v + a * dt\n","\n","    #put these into the appropriate “slots” in the arrays\n","    time = append(time,t)\n","    position = append(position,x)\n","    velocity = append(velocity,v)\n","\n","analyticx = x0 + v0*time + 0.5*a*time**2"],"metadata":{"id":"ma8kdiKmHxk4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**RUN THE CODE ABOVE BUT WAIT BEFORE YOU RUN THE CODE BELOW!  Make your prediction for what the position should be at the end time of the simulation.  Show your work in your response document.  After you show your teacher your prediction, then you can move on to check.**"],"metadata":{"id":"XtI5TOgFQeRB"}},{"cell_type":"code","source":["\n","print (\"Algorithm gives the position at \", total_time, \" seconds as\", x, \" m.\")\n","print (\"Analytical result: position \", analyticx[N],\" m.\")"],"metadata":{"id":"znSvhHmqOmOY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now that the calculations are done, plot the position:\n","\n","fig = plt.figure()\n","\n","xlabel(\"Time (s)\")\n","ylabel(\"Position (m)\")\n","\n","# just for comparison, I'll also plot the known solution!\n","plt.plot(time, position, 'r-')\n","plt.plot(time, analyticx, 'b-')\n","plt.xlabel('Time (s)')\n","plt.ylabel('Position (m)')\n","plt.title('Position vs time')\n","plt.grid(True)\n","plt.show();\n","fig.savefig(\"PositionvstimeGraph.png\")"],"metadata":{"id":"B-nVVGXILwb2"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["To see the graph you may need to open the file folder icon on the left side of the screen.\n","\n","Was your prediction correct?  Explain.  \n","\n","Clearly, the algorithm can be improved.  Try changing the time step and re-running the program.\n","\n","Record in your response document what time step you chose and the algorithm's result.  Change the name of the graph to PositionvstimeGraph1 and copy that result into your response document as well."],"metadata":{"id":"MECQcX2XQ-0Y"}},{"cell_type":"markdown","source":["## **PART 3:  Implicit Euler Method**"],"metadata":{"id":"3p06_VCfSNO_"}},{"cell_type":"markdown","source":["In this part, we will look at how changing the order of just two lines affects our results.  \n","\n","Look at the code below.  Note that it looks nearly identical to the code for the Forward Euler Method.\n","\n","In your response document part 3, write out which lines are reversed.  Change your time stamp to whatever you found successful in the Forward Euler method above.  \n","\n","Run the code and compare your result with the Forward Euler method as well as the analytical result.  "],"metadata":{"id":"HdLzZQHVS75c"}},{"cell_type":"code","source":["#ImplicitEuler (AKA Reverse Euler Method)\n","from pylab import *\n","import matplotlib\n","matplotlib.use(\"Agg\")\n","import matplotlib.pyplot as plt\n","\n","a = 10.0     # constant acceleration of 10 m/s2\n","dt = 0.1    #  1/10th second timestep\n","total_time = 20.0 #set total time of motion to 20 seconds\n","N = int(total_time/dt)     # number of points in arrays (lists of numbers)\n","v0 = 0.0    # initial velocity\n","x0 = 0.0    # initial position\n","\n","# first, set up variables and almost-empty arrays to hold our answers:\n","t = 0\n","x = x0\n","v = v0\n","\n","time = array([0])       # initial value of time is 0 seconds\n","position = array([x0])    # initial height is x0\n","velocity = array([v0])  # initial velocity is v0\n","# Note that 't', 'x' and 'v' are the current time, position and velocity, but\n","# 'time', 'height' and 'velocity' are arrays\n","\n","# Now let's use Euler's method to find the position and velocity.\n","for j in range(N):\n","    t = t + dt\n","    v = v + a * dt\n","    x = x + v * dt\n","\n","    #put these into the appropriate “slots” in the arrays\n","    time = append(time,t)\n","    position = append(position,x)\n","    velocity = append(velocity,v)\n","\n","analyticx = x0 + v0*time + 0.5*a*time**2"],"metadata":{"id":"HGa4YowwUGMS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print (\"Implicit Euler Algorithm gives the position at \", total_time, \" seconds as\", x, \" m.\")\n","print (\"Analytical result: position \", analyticx[N],\" m.\")"],"metadata":{"id":"xb61nzGmUReI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now that the calculations are done, plot the position:\n","fig = plt.figure()\n","xlabel(\"Time (s)\")\n","ylabel(\"Position (m)\")\n","\n","# just for comparison, I'll also plot the known solution!\n","plt.plot(time, position, 'r-')\n","plt.plot(time, analyticx, 'b-')\n","plt.xlabel('Time (s)')\n","plt.ylabel('Position (m)')\n","plt.title('Position vs time')\n","plt.grid(True)\n","fig.savefig(\"PositionvstimeGraphImplicitEuler.png\")\n","plt.show()"],"metadata":{"id":"6aUlR875WEHC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Change some of the values of the given variables (like a or v0, for example) and see how changing those affects your results.  \n","\n","Give at least three different variable value changes and their results (screenshots are fine).  \n","\n","For each of these, find the percent error between the displacement given by the code and the analytical result."],"metadata":{"id":"D-UQXkEFWplB"}},{"cell_type":"markdown","source":["## **Part 4:  Trapezoid Method**"],"metadata":{"id":"4WiJV-r7W7gN"}},{"cell_type":"markdown","source":["In the next part, you are going to try to use a slightly more complex numerical integration technique.  The below code is NOT QUITE correct.  FIX IT so that works correctly.  Use #comments to explain what you changed and copy this final code and the results of a successful run into your response document."],"metadata":{"id":"1JHNS7AxXFgb"}},{"cell_type":"code","source":["#AlmostTrapezoid (you need to fix/complete the code)\n","from pylab import *\n","from math import *\n","\n","t0 = 0    #  initial time\n","total_time = 20.0  #set total time of motion to 20 seconds\n","dt = 0.1 #timestep size 0.1 s\n","N = int(total_time/dt)     # number of points in arrays (lists of numbers)\n","\n","#Now we define acceleration as a function\n","#for a constant acceleration it doesn't look very impressive\n","def a(t):\n","    return 10 + 0*t #the zero part is to make it easy to see how to change func\n","\n","\n","def trapezoid(f,a,b,n):\n","    h = float(b-a)/n\n","    result = 0.5*f(a) + f(b)\n","    for i in range(1, n):\n","        result += f(a + i*h)\n","    result *= h\n","    return result\n","\n","vchange = trapezoid(a,t0,total_time, N)\n","\n","print (\"Trapezoidal Approximation of the Change in Velocity: \", vchange)\n"],"metadata":{"id":"ekJo1dJpXtMG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Change the acceleration to something not constant.  Most simply, you can let there be a constant jerk.  Show how you modify the code to integrate over the same time scale we’ve been using and your results in your response document."],"metadata":{"id":"J5SAQrgWaFss"}},{"cell_type":"markdown","source":["Extension:  If you have time, change your acceleration to a more complicated function (I recommend still using a polynomial) and modify your code.  Show your code and results in your response document."],"metadata":{"id":"49glxHVGaQoR"}},{"cell_type":"markdown","source":["More to come -> using accelerometer data to get velocity and time, but that will be a new notebook."],"metadata":{"id":"lfAjsmpIAAb6"}}]}