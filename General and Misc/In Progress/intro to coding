{"cells":[{"cell_type":"markdown","metadata":{"id":"sqQpjlBiPUcy"},"source":["*My class is a contexual learning environment- rather than teaching a specific curriculum, students collect data similarly to an academic research lab, and I guide them when they get stuck. This notebook is designed to help students who will need to learn coding for their projects*"]},{"cell_type":"markdown","metadata":{"id":"zfjMica8AOfk"},"source":["# **Introduction to Python and analyzing datasets**\n","\n","So you got data- congratulations! Now what?\n","\n","Remember: *big claims require big evidence*, and this is not just a raw data set or a pretty good guess because the experiment seemed to work. Instead, it comes from the analysis of your data. Analysis of data needs to be supported with statistics and/or graphs that are then explained.\n","\n","This notebook is designed to help you learn simple Python coding, determine what statistical analyses are best for your data set, and, finally, interpret your experimental data.\n","\n","The great thing about coding is that you won't hurt anything by experimenting. If you break it, close the tab and open the activity again to start over. If you want to save the notebook, create a copy in your own drive and it will automatically save; if you need to redo the notebook, just undo or go back to the original version and make a new copy."]},{"cell_type":"markdown","metadata":{"id":"YdLilV1IVeZJ"},"source":["\n","# Intro To Coding\n","\n","In this activity you will learn to:  \n","- run and edit Python code\n","- read comments in Python\n","- run code in order\n","- import software modules\n","- use a real data set to learn to describe, graph, and analyze your data  \n","\n","<hr/>\n","\n","# Part 1: Running Python code  \n","There are two ways to run the code below:\n","- press SHIFT and ENTER at the same time\n","- click on the play button (&#9658;) to the left of the code  \n","\n","Click \"run anyway\" on the popup window. It happens the first time you run this code telling you it loads from GitHub (it's totally safe, that's why we use it).\n","\n","Run each block of code to see what it does. Look for hidden messages, too. They're called *comments* and they start with #."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1655498472697,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"ABWaV5cLV0Bq","outputId":"2313b0ba-3537-4871-830d-52c939897b6c"},"outputs":[{"data":{"text/plain":["2"]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["#this gray box is a code box- you know because of the \"play\" button to the left\n","#any line with a hashtag at the front is considered \"commented out\"- this means it is not going to be read as code, but allows you to put in notes for yourself\n","#Run this block of code to see the answer to 1+1\n","1+1"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5,"status":"ok","timestamp":1655498476702,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"yjWdZRAzV2U4","outputId":"98cfb449-d51a-43b2-e225-f3382504ff9f"},"outputs":[{"data":{"text/plain":["2.0"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["10/5  # a comment can come after code on the same line, too"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":453,"status":"ok","timestamp":1655498483457,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"pBnzUWPqV4Ip","outputId":"8c563da1-21db-4cf0-bb13-64d0c7ece1ea"},"outputs":[{"data":{"text/plain":["6"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["2*3   # a comment can come after code on the same line, too"]},{"cell_type":"markdown","metadata":{"id":"YrBNk1FLXlnu"},"source":["**Challenge**  \n","- Try to edit the code above to solve a different math problem, like **4 times 5**. You'll have to run the block of code again to see the new answer.  \n","\n","<hr/>\n","\n","# Part 2: Order is everything\n","A program works in a sequence. Running code out of order often won't work.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":459,"status":"ok","timestamp":1655498489952,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"PohLEHARXwZb","outputId":"1794469a-b9c2-43ab-cb18-786b8b0b1df1"},"outputs":[{"data":{"text/plain":["10"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["a = 5   # this line creates a variable called \"a\" and sets it equal to 5\n","a*2     # this line multiplies a times 2. If a=5, then we should get 10 below for the answer"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":183},"executionInfo":{"elapsed":13,"status":"error","timestamp":1655498491463,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"xANpnMr4XxoZ","outputId":"ddad5ef4-307b-42c6-bef8-d299fddb147d"},"outputs":[{"ename":"NameError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-2e5ac827ff97>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;36m2\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mb\u001b[0m \u001b[0;31m# we didn't tell the program what b equals, so this gives an error\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;31m#don't be scared of errors!! they teach you something you may have either forgotten or totally not realized. (in coding, in science, and in life)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'b' is not defined"]}],"source":["2*b # we didn't tell the program what b equals, so this gives an error\n","#don't be scared of errors!! they teach you something you may have either forgotten or totally not realized. (in coding, in science, and in life)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gwO95_EUX_DB"},"outputs":[],"source":["b=3 # running this code will tell the program what b equals. Then, try running the block of code above again."]},{"cell_type":"markdown","metadata":{"id":"wA08sIk8YCCT"},"source":["**Challenge**\n","- Write a math problem using only variables, no numbers, like **a times b**.  \n","- Write a math problem using +, -, *, /, and (  ).\n","- Create another variable and multiply it by **a**.  \n","Remember, you can't ruin anything here! Go crazy! Does order of operations work here? Find out! How old is your favorite actor? Do the math in code! You have permission to have fun here.\n","<hr/>\n","\n","# Part 3: Importing modules  \n","The Python language can do some math by itself. To do more complex tasks, we have to import other software called *modules*."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8QnlHzh2YBpp"},"outputs":[],"source":["# numpy is a module to let you do numerical operations in Python\n","import numpy"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1655498536444,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"GTso-mLVYGM5","outputId":"46d64632-8085-4fa2-99c1-e01a6b4913a3"},"outputs":[{"data":{"text/plain":["3.0"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["# numpy has a function called \"sqrt\" that calculates the square root of a number\n","numpy.sqrt(9)   # what's the square root of 9?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1655498538956,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"L4kMEGOLYIAT","outputId":"67a63877-e133-460f-eb8e-8537a71126d9"},"outputs":[{"data":{"text/plain":["2.0"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["# you can give modules a nickame when you import them, too\n","\n","import numpy as np   # now you can type \"np\" instead of \"numpy\"\n","np.sqrt(4)           # what's the square root of 4?"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"elapsed":472,"status":"ok","timestamp":1655498547675,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"eeViwr6uYJ86","outputId":"7082b6ba-d084-44d8-970e-a7cfa207d8c1"},"outputs":[{"data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# some modules have long names, so a nickname is handy\n","\n","import matplotlib.pyplot as plt         # \"plt\" is much shorter\n","plt.scatter([1,2,3,4,5], [0,1,3,4,2], color='pink', edgecolor='blue');   # this makes a scatterplot!"]},{"cell_type":"markdown","metadata":{"id":"QQgIhGyBYO-a"},"source":["**Challenge**\n","- Change the colors of the graph to green and black.\n","- Numpy has a function called *round* that will round a decimal number. Try using it like you used the *sqrt* function.  \n","\n","# Part 4: Markdown  \n","The text in this notebook that isn't code, like this sentence, is called *markdown*. You can double-click on this text to see the markdown code underneath. Like usual, press SHIFT+ENTER to turn the markdown code into pretty, formatted text again. Markdown lets us write text with formatting like:  \n","- bullet lists  \n","- *italics*  \n","- **bold** text\n","- section headings  \n","- [links](https://xkcd.com/665/)\n","- images  \n","\n","![cute kitten](https://github.com/adamlamee/CODINGinK12/raw/master/notebooks/1dayoldkitten.png)\n","\n","**Challenge**\n","- Make this sentence bold.  \n","- Make this sentence in italics.  \n","- change the picture to your current favorite meme (keep it school appropriate, please)\n","- Add a 5th bullet point below this one   \n","\n","# Self-Check  \n","- Were you able to run the Python code? For example, could you add or multiply numbers and see the answer?  \n","- Could you edit the code to produce different output?\n","- Did you find the comments? They start with # and are messages to people reading the code.\n","- Can you explain what's wrong with running \"c=2\" then \"c+d\"?\n","- Can you name two Python software modules? Hint: you imported them.  \n","- Could you edit a markdown cell and do some formatting, like a bulleted list, **bold**, or *italics*?  \n","\n","<hr/>  \n"]},{"cell_type":"markdown","metadata":{"id":"xQnGMlqanU6w"},"source":["#This is all fun, but how does it help me with my investigation?\n","Excellent quesiton, let's start looking at some publicly provided data sets."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73,"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK","headers":[["content-type","application/javascript"]],"ok":true,"status":200,"status_text":""}}},"id":"KGiyeyIMgIgL","executionInfo":{"status":"ok","timestamp":1655499440008,"user_tz":420,"elapsed":17341,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"}},"outputId":"70bcaf6e-7966-4801-facb-9ad37ff83739"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-ec4ffbf6-1557-49f3-8014-cb6b7bdf5d13\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-ec4ffbf6-1557-49f3-8014-cb6b7bdf5d13\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving AirfoilSelfNoise (1).csv to AirfoilSelfNoise (1).csv\n"]}],"source":["#if you want to use one of the collected data sets:\n","#go to https://github.com/meganlnoel/playcode and find a dataset relevant to what your group studies\n","#down load the csv file to your computer\n","#run the code in this box and select the file\n","\n","from google.colab import files\n","uploaded = files.upload()\n","\n","#this does not display the data, but should instead just describe the file after the upload is completed.\n","#if you get an error, you might be in the wrong file type- open the file in Notepad (on your computer) and save as a .csv file, then try again (select the correct file)\n","#for this example, I am using the Airfoil Noise test data from Nasa"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1d5NXVi8gb5D"},"outputs":[],"source":["#you want to tell the program to use this data set, so run this code using that file\n","#\"data\" is the tag you'll use to tell python to use the data pulled from this file- you can rename it something else if you want\n","import pandas as pd\n","import io\n","data = pd.read_csv(io.BytesIO(uploaded['AirfoilSelfNoise (1).csv']))\n","# Dataset is now stored in a Pandas Dataframe"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":183,"status":"ok","timestamp":1655499493415,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"bKBYUX0bKQWg","outputId":"b0f8a04d-8d9b-43bf-af5f-13c04b3262d2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["pandas.core.frame.DataFrame"]},"metadata":{},"execution_count":25}],"source":["#if you want to make sure the data is in the code and read to go, run this code. It if doesn't thrown an error, it should say it is a pandas dataframe\n","type(data)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":200,"status":"ok","timestamp":1655499512438,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"u_KV50Z7Ivtf","outputId":"be55dbca-19b9-4bfa-9569-69cb13302843"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["f               int64\n","alpha         float64\n","c             float64\n","U_infinity    float64\n","delta         float64\n","SSPL          float64\n","dtype: object"]},"metadata":{},"execution_count":26}],"source":["#you can also see what kind of data (integer, decimcals, objects, etc) is in the file\n","data.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":244,"status":"ok","timestamp":1655499519064,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"y_Tf_fufOyXP","outputId":"de3cfdf7-ed12-4908-c928-e3cfd5743ac3"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         f  alpha       c  U_infinity     delta     SSPL\n","1498  2500   15.6  0.1016        39.6  0.052849  110.264\n","1499  3150   15.6  0.1016        39.6  0.052849  109.254\n","1500  4000   15.6  0.1016        39.6  0.052849  106.604\n","1501  5000   15.6  0.1016        39.6  0.052849  106.224\n","1502  6300   15.6  0.1016        39.6  0.052849  104.204"],"text/html":["\n","  <div id=\"df-f22426d3-c0a2-4da7-87d6-a9b6b344306a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>f</th>\n","      <th>alpha</th>\n","      <th>c</th>\n","      <th>U_infinity</th>\n","      <th>delta</th>\n","      <th>SSPL</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1498</th>\n","      <td>2500</td>\n","      <td>15.6</td>\n","      <td>0.1016</td>\n","      <td>39.6</td>\n","      <td>0.052849</td>\n","      <td>110.264</td>\n","    </tr>\n","    <tr>\n","      <th>1499</th>\n","      <td>3150</td>\n","      <td>15.6</td>\n","      <td>0.1016</td>\n","      <td>39.6</td>\n","      <td>0.052849</td>\n","      <td>109.254</td>\n","    </tr>\n","    <tr>\n","      <th>1500</th>\n","      <td>4000</td>\n","      <td>15.6</td>\n","      <td>0.1016</td>\n","      <td>39.6</td>\n","      <td>0.052849</td>\n","      <td>106.604</td>\n","    </tr>\n","    <tr>\n","      <th>1501</th>\n","      <td>5000</td>\n","      <td>15.6</td>\n","      <td>0.1016</td>\n","      <td>39.6</td>\n","      <td>0.052849</td>\n","      <td>106.224</td>\n","    </tr>\n","    <tr>\n","      <th>1502</th>\n","      <td>6300</td>\n","      <td>15.6</td>\n","      <td>0.1016</td>\n","      <td>39.6</td>\n","      <td>0.052849</td>\n","      <td>104.204</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f22426d3-c0a2-4da7-87d6-a9b6b344306a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f22426d3-c0a2-4da7-87d6-a9b6b344306a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f22426d3-c0a2-4da7-87d6-a9b6b344306a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":27}],"source":["data.tail() #shows end of data set"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":200,"status":"ok","timestamp":1655499536511,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"tHBlJmmrgdpp","outputId":"bcae67d8-ce95-4dba-90ab-d994a1ad215b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      f  alpha       c  U_infinity     delta     SSPL\n","0   800    0.0  0.3048        71.3  0.002663  126.201\n","1  1000    0.0  0.3048        71.3  0.002663  125.201\n","2  1250    0.0  0.3048        71.3  0.002663  125.951\n","3  1600    0.0  0.3048        71.3  0.002663  127.591\n","4  2000    0.0  0.3048        71.3  0.002663  127.461"],"text/html":["\n","  <div id=\"df-c842e3aa-5f8b-49b9-b848-54d63c02a7ce\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>f</th>\n","      <th>alpha</th>\n","      <th>c</th>\n","      <th>U_infinity</th>\n","      <th>delta</th>\n","      <th>SSPL</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>800</td>\n","      <td>0.0</td>\n","      <td>0.3048</td>\n","      <td>71.3</td>\n","      <td>0.002663</td>\n","      <td>126.201</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1000</td>\n","      <td>0.0</td>\n","      <td>0.3048</td>\n","      <td>71.3</td>\n","      <td>0.002663</td>\n","      <td>125.201</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1250</td>\n","      <td>0.0</td>\n","      <td>0.3048</td>\n","      <td>71.3</td>\n","      <td>0.002663</td>\n","      <td>125.951</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1600</td>\n","      <td>0.0</td>\n","      <td>0.3048</td>\n","      <td>71.3</td>\n","      <td>0.002663</td>\n","      <td>127.591</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2000</td>\n","      <td>0.0</td>\n","      <td>0.3048</td>\n","      <td>71.3</td>\n","      <td>0.002663</td>\n","      <td>127.461</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c842e3aa-5f8b-49b9-b848-54d63c02a7ce')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c842e3aa-5f8b-49b9-b848-54d63c02a7ce button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c842e3aa-5f8b-49b9-b848-54d63c02a7ce');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":28}],"source":["#look at what data was collected and how it is organized by looking at the top 5 (or any other amount) of lines of data\n","data.head(5)\n","#if your data has no headers or descriptors, go to the readme file associated with the data set to find them- data is useless if you don't know what it describes!"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1655400869485,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"dqrLO3M_gg3h","outputId":"c298abab-de48-4c0b-b51e-20bb64049988"},"outputs":[{"data":{"text/plain":["(1503, 6)"]},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":["#how much data do you have? run this code to find out- it shows you the number of (rows, columns)\n","data.shape"]},{"cell_type":"markdown","metadata":{"id":"uTcASjvwgiKO"},"source":["If this was your data, you might probably already know which columns to explore and analyze. However, if you are using data from another source, or if you are using a program that outputs a lot of data, you might need to consider what you want to do statistical analysis on. In this case, we are using real data to learn how to code, so let's learn how to graph."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"drDDTAdGgnDp"},"outputs":[],"source":["#often we are concerned with how one variable (the independant) affects another (the dependent), so we want to graph this as a scatter plot, which means we need a module which will handle this.\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":244,"status":"ok","timestamp":1655499566467,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"0VpLm1n9gpxy","outputId":"1316f4c3-e609-4d32-a3e9-4ee9a2696a8c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["count     1503.000000\n","mean      2886.380572\n","std       3152.573137\n","min        200.000000\n","25%        800.000000\n","50%       1600.000000\n","75%       4000.000000\n","max      20000.000000\n","Name: f, dtype: float64"]},"metadata":{},"execution_count":29}],"source":["#you can look at each of your columns using\n","#data['column name'].describe()\n","#you might want to rename the data headers as something simple in the original file, but have what they are somewhere close by so you don't forget\n","#f = frequency, alpha= angle of attack, c = chord length, U_infinity = free-stream velocity, delta= suction side displacement thickness, SSPL= scaled sound pressure level\n","data['f'].describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":244,"status":"ok","timestamp":1655498738287,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"QWKmsQqVgsoa","outputId":"0ee0431e-85f5-4665-fd17-0157179eda4f"},"outputs":[{"data":{"text/plain":["count    1503.000000\n","mean        6.782302\n","std         5.918128\n","min         0.000000\n","25%         2.000000\n","50%         5.400000\n","75%         9.900000\n","max        22.200000\n","Name: alpha, dtype: float64"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["data['alpha'].describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":196,"status":"ok","timestamp":1655498740756,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"-WzSjlkGgvdK","outputId":"ab0b85dc-c53a-4cac-b7f1-f01cfae9a91b"},"outputs":[{"data":{"text/plain":["count    1503.000000\n","mean        0.136548\n","std         0.093541\n","min         0.025400\n","25%         0.050800\n","50%         0.101600\n","75%         0.228600\n","max         0.304800\n","Name: c, dtype: float64"]},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":["data['c'].describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":266,"status":"ok","timestamp":1655498743145,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"pOJsh4TCgvUJ","outputId":"18c26d27-4fbf-4eac-e127-a7c05b5c3f77"},"outputs":[{"data":{"text/plain":["count    1503.000000\n","mean       50.860745\n","std        15.572784\n","min        31.700000\n","25%        39.600000\n","50%        39.600000\n","75%        71.300000\n","max        71.300000\n","Name: U_infinity, dtype: float64"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["data['U_infinity'].describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":236,"status":"ok","timestamp":1655498745051,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"YNJ2aVIOgzRp","outputId":"cf3ac304-4e2f-4863-f8ae-d64cf6076659"},"outputs":[{"data":{"text/plain":["count    1503.000000\n","mean        0.011140\n","std         0.013150\n","min         0.000401\n","25%         0.002535\n","50%         0.004957\n","75%         0.015576\n","max         0.058411\n","Name: delta, dtype: float64"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["data['delta'].describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":249,"status":"ok","timestamp":1655498746799,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"IIQtUHIcg0ri","outputId":"245bc006-67b1-4916-e565-59c64c22a989"},"outputs":[{"data":{"text/plain":["count    1503.000000\n","mean      124.835943\n","std         6.898657\n","min       103.380000\n","25%       120.191000\n","50%       125.721000\n","75%       129.995500\n","max       140.987000\n","Name: SSPL, dtype: float64"]},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":["data['SSPL'].describe()"]},{"cell_type":"markdown","metadata":{"id":"CBjbCSUGg3g5"},"source":["If just describing the data doesn't really tell you any think useful, you might consider looking at each column as a histogram, especially if you are not sure which is a control variable."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"elapsed":820,"status":"ok","timestamp":1655499614925,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"FnlyeUOEg6mq","outputId":"b536f150-aa7d-4633-cae1-864a2880db3b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYUAAAEWCAYAAACJ0YulAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAagklEQVR4nO3debRlZX3m8e9jgQwOjCVBCiwjiMFOQK0GHJJFwNgMKiTBKUaRkFTSEsCoSzGmO+hKpzEdRTFZKhEUCVEcIhAlKiJoEhStQmQMUhoMVSLzoBKR4dd/7PduDpe6VaeKOvecuvf7WWuvs/e7h/O791Sd5+7p3akqJEkCeMy4C5AkTQ5DQZLUMxQkST1DQZLUMxQkST1DQZLUMxSkOSjJ7kkuS/LjJMeuZv4OSb7W5r97HDVqMm0y7gKkdZXkemAH4IGB5qdX1Q/HU9FEegtwYVXtNcP8pcCtwBPLm5U0wD0FbaxeUlWPHxgeFghJ5vsfPE8BrlrL/KsNBE1nKGjOSFJJjk5yHXBda3txO4xyZ5KLk/zKwPLPSnJpO4RyVpJPJPmLNu91Sf51NdvftY1vluSvk/xnkpuSfDDJFm3efklWJnlTkpuT3JjkyIHtbJHk3Ul+kOSuJP/a2j6f5Jhp73l5kt+c4ed9aZKr2s92UZJfau1fAX4d+JskP0ny9GnrfRQ4AnhLm//C9fuNay4yFDTXHAbsA+yR5FnAacAfAtsBHwLObV/ojwXOBs4AtgU+Bfz2OrzPicDTgb2AXYGdgP89MP8XgK1a+1HA3ybZps37a+A5wPPae78FeBA4HfjdqQ0k2bOt//npb96+6D8OvAFYCJwH/FOSx1bV/sC/AH/c9qK+O7huVb0OOBP4qzb/y+vwc2uOMxS0sTq7/YV8Z5KzB9r/b1XdXlX/RXfc/ENVdUlVPVBVpwP3Avu2YVPgvVV1X1V9GvjWMG+cJG3bf9Le68fAXwKvHFjsPuCdbdvnAT8Bdk/yGOD3gOOqalWr6+Kquhc4F3h6kt3aNl4DnFVVP19NGa8APl9V51fVfXRBswVd0Ejrbb4fd9XG67AZ/sK9YWD8KcAR0w7JPBZ4MlDAqmnH1H8w5HsvBLYElnf5AECABQPL3FZV9w9M3wM8Htge2Bz43vSNVtXPkpwF/G6SdwCvAg6foYYnD9ZbVQ8muYFuz0Jab+4paK4Z/JK/Afg/VbX1wLBlVX0cuBHYKQPf6sAuA+M/pfviByDJLwzMuxX4L+CZA9vdqqoeP0R9twI/A542w/zTgVcDBwD3VNXXZ1juh3ShN1VfgJ2BVUPUIM3IUNBc9nfAHyXZJ53HJTkkyROArwP3A8cm2TTJbwF7D6z7HeCZSfZKsjlwwtSMqnqwbfukJE8CSLJTkv+xtoLauqcB70ny5CQLkjw3yWZt/tfpzi+8m+58x0w+CRyS5IAkmwJvojs0dvFQvxlpBoaC5qyqWgb8AfA3wB3ACuB1bd7Pgd9q07fTHaP/x4F1vwu8E/gy3ZVMD7sSCXhr2943ktzdltt9yNLeDFxBdw7jduBdPPz/4seAXwb+fg0/27V0J6XfT7f38RK6y3RXd/5BGlq8TFnqtEs1V1bVn425jtcCS6vqBeOsQ/OTewrSBEmyJfB64JRx16L5yVCQJkQ7J3ELcBPwD2MuR/OUh48kSb2R7ikkuT7JFa2bgWWtbdsk5ye5rr1u09qT5OQkK9qt/c8eZW2SpEca6Z5C681ySVXdOtD2V8DtVXVikuOBbarqrUkOBo4BDqbrpuB9VbXPmra//fbb1+LFi0dWvyTNRcuXL7+1qhaubt447mg+FNivjZ8OXER3ed+hwMfaHabfSLJ1kh2r6saZNrR48WKWLVs24nIlaW5JMuPd+6M+0VzAl5IsT7K0te0w8EX/I7p+8aG7PX+wi4KVrOaW/SRLkyxLsuyWW24ZVd2SNC+Nek/hBVW1qt31eX6Sfx+cWVWVZJ2OX1XVKbTL9ZYsWeJZcknagEa6p1BVq9rrzcBn6boRuCnJjgDt9ea2+Cq6vlumLMJ+XCRpVo0sFFo/M0+YGgdeBFxJ1z3wEW2xI4Bz2vi5wGvbVUj7Anet6XyCJGnDG+Xhox2Az7ZOKDcB/qGqvpDkW8AnkxxF1/Xvy9vy59FdebSCrpvhIx+5SUnSKI0sFKrq+8Ceq2m/ja5b4OntBRw9qnokSWtnNxeSpJ6hIEnqGQqSpJ7PaJZm2eLjP9+PX3/iIWOsRHok9xQkST1DQZLUMxQkST1DQZLUMxQkST2vPpKkMZjUq9DcU5Ak9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVLPUJAk9QwFSVJv5KGQZEGSbyf5XJt+apJLkqxIclaSx7b2zdr0ijZ/8ahrkyQ93GzsKRwHXDMw/S7gpKraFbgDOKq1HwXc0dpPastJkmbRSEMhySLgEODDbTrA/sCn2yKnA4e18UPbNG3+AW15SdIsGfWewnuBtwAPtuntgDur6v42vRLYqY3vBNwA0Obf1ZZ/mCRLkyxLsuyWW24ZZe2SNO+MLBSSvBi4uaqWb8jtVtUpVbWkqpYsXLhwQ25akua9TUa47ecDL01yMLA58ETgfcDWSTZpewOLgFVt+VXAzsDKJJsAWwG3jbA+SdI0I9tTqKq3VdWiqloMvBL4SlW9GrgQOLwtdgRwThs/t03T5n+lqmpU9UmSHmkc9ym8FXhjkhV05wxObe2nAtu19jcCx4+hNkma10Z5+KhXVRcBF7Xx7wN7r2aZnwEvm416JEmr5x3NkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6q01FJIcl+SJ6Zya5NIkL5qN4iRJs2uYPYXfq6q7gRcB2wCvAU4caVWSpLEYJhTSXg8GzqiqqwbaJElzyDChsDzJl+hC4YtJngA8ONqyJEnjsMkQyxwF7AV8v6ruSbIdcORoy5IkjcMwewrnV9WlVXUnQFXdBpw02rIkSeMw455Cks2BLYHtk2zDQ+cRngjsNAu1SZJm2ZoOH/0h8AbgycByHgqFu4G/GXFdkqQxmDEUqup9wPuSHFNV75/FmiRJY7LWE81V9f4kzwMWDy5fVR8bYV2SpDFYaygkOQN4GnAZ8EBrLsBQkKQ5ZphLUpcAe1RVjboYSdJ4DXNJ6pXAL4y6EEnS+A2zp7A9cHWSbwL3TjVW1UtHVpUkaSyGCYUTRl2EJGkyDHP10VeTPAXYraq+nGRLYMHoS5MkzbZhnqfwB8CngQ+1pp2As0dZlCRpPIY50Xw08Hy6O5mpquuAJ42yKEnSeAwTCvdW1c+nJpJsQnefwhol2TzJN5N8J8lVSd7R2p+a5JIkK5KcleSxrX2zNr2izV+8fj+SJGl9DRMKX03yp8AWSX4D+BTwT0Osdy+wf1XtSdf19oFJ9gXeBZxUVbsCd9B1zU17vaO1n9SWkyTNomFC4XjgFuAKuk7yzgP+bG0rVecnbXLTNhSwP905CoDTgcPa+KFtmjb/gCQ+4U2SZtEwl6QeBnysqv5uXTeeZAFdD6u7An8LfA+4s6rub4us5KFuuHcCbgCoqvuT3AVsB9w6bZtLgaUAu+yyy7qWJElag2H2FF4CfDfJGUle3M4pDKWqHqiqvYBFwN7AM9azzsFtnlJVS6pqycKFCx/t5iRJA9YaClV1JN1f+p8CXgV8L8mH1+VN2lPbLgSeC2w9ECyLgFVtfBWwM/Qns7cCbluX95EkPTrD7ClQVfcB/wx8gu5w0GFrXgOSLEyydRvfAvgN4Bq6cDi8LXYEcE4bP7dN0+Z/xU74JGl2DdN19kHAK4D9gIuADwMvH2LbOwKnt/MKjwE+WVWfS3I18IkkfwF8Gzi1LX8qcEaSFcDtwCvX7UeRJD1aw5wfeC1wFvCHVXXv2haeUlWXA89aTfv36c4vTG//GfCyYbcvSdrwhjmn8Cq6v+h/FbpDQUmeMOrCJEmzb336PlqEfR9J0pxk30eSpN4w5xTuraqfT91cPGzfR9IkW3z85/vx6088ZIyVSJNlmFCY3vfR6xmu7yNJWiPDefKMrO8jSdLGZ5gnrz0I/F0bJElz2FB3NEuS5gdDQZLUmzEUkpzRXo+bvXIkSeO0pj2F5yR5MvB7SbZJsu3gMFsFSpJmz5pONH8QuAD4RbqeUQefglatXZI0h8y4p1BVJ1fVLwGnVdUvVtVTBwYDQZLmoGEuSf2fSfakdYgHfK31gCpJmmOG6RDvWOBMuv6OngScmeSYURcmSZp9w3Rz8fvAPlX1U4Ak7wK+Drx/lIVJkmbfMPcpBHhgYPoBHn7SWZI0Rwyzp/AR4JIkn23Th/HQIzQlSXPIMCea35PkIuAFrenIqvr2SKuSJI3FMHsKVNWlwKUjrkWSNGb2fSRJ6hkKkqTeGkMhyYIkF85WMZKk8VpjKFTVA8CDSbaapXokSWM0zInmnwBXJDkf+OlUY1UdO7KqJEljMUwo/GMbJElz3DD3KZyeZAtgl6q6dhZqkiSNyTAd4r0EuAz4QpveK8m5oy5MkjT7hrkk9QRgb+BOgKq6DB+wI0lz0jChcF9V3TWt7cFRFCNJGq9hTjRfleR3gAVJdgOOBS4ebVmSpHEYZk/hGOCZwL3Ax4G7gTeMsihJ0ngMc/XRPcDb28N1qqp+PPqyJEnjMMzVR/89yRXA5XQ3sX0nyXNGX5okabYNc/joVOD1VbW4qhYDR9M9eGeNkuyc5MIkVye5KslxrX3bJOcnua69btPak+TkJCuSXJ7k2Y/i55IkrYdhQuGBqvqXqYmq+lfg/iHWux94U1XtAewLHJ1kD+B44IKq2g24oE0DHATs1oalwAeG/ikkSRvEjOcUBv5S/2qSD9GdZC7gFcBFa9twVd0I3NjGf5zkGmAn4FBgv7bY6W1bb23tH6uqAr6RZOskO7btSJJmwZpONL972vSfD4zXurxJksXAs4BLgB0Gvuh/BOzQxncCbhhYbWVrMxQkaZbMGApV9esb4g2SPB74DPCGqro7yeB7VJJ1DZildIeX2GWXXTZEiZKkZq2XpCbZGngtsHhw+WG6zk6yKV0gnFlVUz2t3jR1WCjJjsDNrX0VsPPA6ota28NU1SnAKQBLlixZp0CRJK3ZMCeaz6MLhCuA5QPDGqXbJTgVuKaq3jMw61zgiDZ+BHDOQPtr21VI+wJ3eT5BkmbXMN1cbF5Vb1yPbT8feA3dvQ2XtbY/BU4EPpnkKOAHwMvbvPOAg4EVwD3AkevxnpKkR2GYUDgjyR8An6Pr6gKAqrp9TSu1S1czw+wDVrN80d0DIUkak2FC4efA/wPezkNXHRV2ny1Jc84wofAmYNequnXUxUiSxmuYE81Tx/glSXPcMHsKPwUuS3IhDz+nsNZLUiVJG5dhQuHsNkiS5rhhnqdw+mwUIkkav2HuaP4PVtPXUVV59ZEkzTHDHD5aMjC+OfAyYNvRlCNJGqe1Xn1UVbcNDKuq6r3AIbNQmyRplg1z+GjwCWiPodtzGGYPQ5K0kRnmy33wuQr3A9fzUH9FkqQ5ZJirjzbIcxUkSZNvmMNHmwG/zSOfp/DO0ZUlSRqHYQ4fnQPcRfcMhXvXsqwkaSM2TCgsqqoDR16JJGnshukQ7+IkvzzySiRJYzfMnsILgNe1O5vvpXtwTlXVr4y0MknSrBsmFA4aeRWSpIkwzCWpP5iNQiRJ4zfMOQVJ0jxhKEiSeoaCJKlnKEiSeoaCJKlnKEiSeoaCJKlnKEiSeoaCJKlnKEiSeoaCJKlnKEiSeoaCJKlnKEiSeoaCJKk3slBIclqSm5NcOdC2bZLzk1zXXrdp7UlycpIVSS5P8uxR1SVJmtko9xQ+Chw4re144IKq2g24oE1D93S33dqwFPjACOuSJM1gZKFQVV8Dbp/WfChwehs/HThsoP1j1fkGsHWSHUdVmyRp9Wb7nMIOVXVjG/8RsEMb3wm4YWC5la1NkjSLxnaiuaoKqHVdL8nSJMuSLLvllltGUJkkzV+zHQo3TR0Waq83t/ZVwM4Dyy1qbY9QVadU1ZKqWrJw4cKRFitJ881sh8K5wBFt/AjgnIH217arkPYF7ho4zCRJmiWbjGrDST4O7Adsn2Ql8OfAicAnkxwF/AB4eVv8POBgYAVwD3DkqOqSJM1sZKFQVa+aYdYBq1m2gKNHVYskaTje0SxJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6hkKkqSeoSBJ6k1UKCQ5MMm1SVYkOX7c9UjSfDMxoZBkAfC3wEHAHsCrkuwx3qokaX6ZmFAA9gZWVNX3q+rnwCeAQ8dckyTNK6mqcdcAQJLDgQOr6vfb9GuAfarqj6cttxRY2iZ3B65dz7fcHrh1PdedLZNe46TXB9a4IUx6fTD5NU5afU+pqoWrm7HJbFfyaFXVKcApj3Y7SZZV1ZINUNLITHqNk14fWOOGMOn1weTXOOn1DZqkw0ergJ0Hphe1NknSLJmkUPgWsFuSpyZ5LPBK4Nwx1yRJ88rEHD6qqvuT/DHwRWABcFpVXTXCt3zUh6BmwaTXOOn1gTVuCJNeH0x+jZNeX29iTjRLksZvkg4fSZLGzFCQJPXmZShMYncaSU5LcnOSKwfatk1yfpLr2us2Y6xv5yQXJrk6yVVJjpvAGjdP8s0k32k1vqO1PzXJJe3zPqtdyDA2SRYk+XaSz01ofdcnuSLJZUmWtbZJ+py3TvLpJP+e5Jokz52w+nZvv7up4e4kb5ikGtdk3oXCBHen8VHgwGltxwMXVNVuwAVtelzuB95UVXsA+wJHt9/bJNV4L7B/Ve0J7AUcmGRf4F3ASVW1K3AHcNQYawQ4DrhmYHrS6gP49araa+Da+kn6nN8HfKGqngHsSfe7nJj6qura9rvbC3gOcA/w2UmqcY2qal4NwHOBLw5Mvw1427jrarUsBq4cmL4W2LGN7whcO+4aB2o7B/iNSa0R2BK4FNiH7k7STVb3+Y+hrkV0Xwj7A58DMkn1tRquB7af1jYRnzOwFfAftItkJq2+1dT7IuDfJrnG6cO821MAdgJuGJhe2dom0Q5VdWMb/xGwwziLmZJkMfAs4BImrMZ2aOYy4GbgfOB7wJ1VdX9bZNyf93uBtwAPtuntmKz6AAr4UpLlrVsZmJzP+anALcBH2iG4Dyd53ATVN90rgY+38Umt8WHmYyhslKr782Ls1w8neTzwGeANVXX34LxJqLGqHqhut30RXSeLzxhnPYOSvBi4uaqWj7uWtXhBVT2b7hDr0Ul+bXDmmD/nTYBnAx+oqmcBP2XaYZhJ+HcI0M4NvRT41PR5k1Lj6szHUNiYutO4KcmOAO315nEWk2RTukA4s6r+sTVPVI1TqupO4EK6wzFbJ5m6UXOcn/fzgZcmuZ6uF+D96Y6PT0p9AFTVqvZ6M92x8L2ZnM95JbCyqi5p05+mC4lJqW/QQcClVXVTm57EGh9hPobCxtSdxrnAEW38CLrj+GORJMCpwDVV9Z6BWZNU48IkW7fxLejOeVxDFw6Ht8XGVmNVva2qFlXVYrp/d1+pqldPSn0ASR6X5AlT43THxK9kQj7nqvoRcEOS3VvTAcDVTEh907yKhw4dwWTW+EjjPqkxjgE4GPgu3fHmt4+7nlbTx4Ebgfvo/ho6iu548wXAdcCXgW3HWN8L6HZ3Lwcua8PBE1bjrwDfbjVeCfzv1v6LwDeBFXS78ptNwOe9H/C5Sauv1fKdNlw19f9jwj7nvYBl7XM+G9hmkuprNT4OuA3YaqBtomqcabCbC0lSbz4ePpIkzcBQkCT1DAVJUs9QkCT1DAVJUs9Q0EYnybGtd8wzx13LhpLkdUmevJ7r7pfkeeux3vVJtl+f99TcNTGP45TWweuBF1bVysHGJJvUQ30IbWxeR3dvxQ/XY939gJ8AF2/AejRPuaegjUqSD9LdYPXPSf4kyQlJzkjyb8AZ7a7mzyT5Vhue39bbLsmX2nMWPpzkB0m2T7I4D3+GxZuTnNDGn5bkC61juH9J8ozW/tEkJye5OMn3kxw+sP5b27MIvpPkxLaNSwfm7zY43doOB5YAZ7b+97dI8pwkX23v/cWB7hGOTfdMi8uTfKJ1TvhHwJ+0dX912N8BXQ+t0sON++45B4d1HRjo2hk4AVgObNGm/4GuQzeAXei65QA4mYfucD6E7u7s7Xlkd+VvBk5o4xcAu7Xxfei6pYDu2Refovujag9gRWs/iO6v9S3b9Lbt9UJgrzb+l8Axq/mZLgKWtPFN23YWtulXAKe18R/S7ngGth74Hbx5YFvr9DsY9+fpMFmDh480F5xbVf/Vxl8I7NF11QTAE1vPrr8G/BZAVX0+yR1r2mBb53nApwa2tdnAImdX1YPA1UmmukB+IfCRqrqnvc/trf3DwJFJ3kj3Bb/3Wn6e3YH/Bpzf3nsBXRco0HXtcGaSs+m6eFidDfI70PxkKGgu+OnA+GOAfavqZ4MLDHxBTnc/Dz+MuvnAdu6srhvu1bl3cPNrqe8zwJ8DXwGWV9Vta1k+wFVV9dzVzDuE7sv9JcDbk/zyapZZ19+B1POcguaaLwHHTE0kmfpS/xrwO63tILpO1ABuAp7UjrdvBrwYoLpnRfxHkpe1dZJkz7W89/l0ewRbtnW2bdv6GfBF4APAR2ZY98fAE9r4tcDCJM9t29k0yTOTPAbYuaouBN5K9xSyx09bd31+B1LPUNBccyywpJ2IvZruJCzAO4BfS3IV3SGU/wSoqvuAd9L1Uno+8O8D23o1cFSSqR5DD13TG1fVF+i6R16W7ulvbx6YfSbd09a+NMPqHwU+2NZbQNeV9rvae19GdyhrAfD3Sa6g6w325OqeG/FPwG9OnWhe19+BNMheUjUvpXvQzZKqunWW3u/NdN0o/6/ZeD9pfXlOQRqxJJ8Fnkb3pDVpormnIEnqeU5BktQzFCRJPUNBktQzFCRJPUNBktT7/xq/gQJlSMchAAAAAElFTkSuQmCC\n"},"metadata":{"needs_background":"light"}}],"source":["plt.hist(data['U_infinity'], bins=100, range=[0,75], log=False) #rather than repeat the code line over and over, try changing the header within this line\n"," # makes the histogram,\n","#bins tell you how finely the data is organized\n","#range is taken from the max in the data description\n","#note that if you found your data set from kaggle, it automatically shows the histograms of each column\n","plt.title(\"Frequency of f\")\n","plt.xlabel(\"frequency tested\")\n","plt.ylabel(\"number of events\")\n","plt.grid(False);"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"elapsed":506,"status":"ok","timestamp":1655499623871,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"XKmvxg5jg9mh","outputId":"b58c9713-c9c8-4c1a-c190-64c526556748"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["#now I know what is an independent variable and what is a dependent variable, so I want to plot them against each other and look for patterns\n","#note that in this air foil noise data set there are several independent variables, so I will probably want to look for combined effects later\n","plt.plot(data['f'],data['U_infinity'], marker='o', color='b', markersize=2)\n","plt.xlabel('frequency') #be sure to label your axes!! and that you label them correctly!\n","plt.ylabel('velocity') #be sure to label your axes!! and that you label them correctly!\n","plt.title('Effects of frequency on velocity')\n","plt.grid(False)\n","plt.axis([200, 2020, 0, 75]) #the ranges of your axes can be found from the descriptions of the data\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"aFQoBkLDhADh"},"source":["If you have a very big data set, you might not be able to see any patterns in your graph- that is where statistics come in."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vIkYOKKvg_w9"},"outputs":[],"source":["import scipy.stats as stats"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":224,"status":"ok","timestamp":1655499643124,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"o9v44WbXhCVi","outputId":"153778eb-21d0-47cf-ee34-e381b49e03c7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinregressResult(slope=-0.0008549790125253032, intercept=127.30373759248681, rvalue=-0.39071141170821416, pvalue=5.361777056415115e-56, stderr=5.199230158034172e-05)"]},"metadata":{},"execution_count":34}],"source":["#not sure where to start with statistics? Look at what others in the field did!\n","#often people start by looking at the relationship between two variables using a linear regression\n","#the closer the R value is to 1, the more your data resembles a linear relationship\n","stats.linregress(data['f'],data['SSPL'])\n","#play around with the variables and see what you get"]},{"cell_type":"markdown","metadata":{"id":"Dndea2FVlWg7"},"source":["This data is very complicated, so don't be discouraged if you get stuck in the analysis!\n","\n","In this case, it might be helpful to pull apart the data and analyze it in pieces."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":399,"status":"ok","timestamp":1655499653809,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"Y6tr1UGhhqPB","outputId":"59f692c6-a717-4c97-adda-da887c3011f2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([  800,  1000,  1250,  1600,  2000,  2500,  3150,  4000,  5000,\n","        6300,  8000, 10000, 12500, 16000,   500,   630,   200,   250,\n","         315,   400, 20000])"]},"metadata":{},"execution_count":35}],"source":["#In this data set, I know the frequency was one of the independent variables, but I'm not sure which frequencies were used- there's a code for that!\n","#this code gives back all unique values (pd.unique) in the data frame (data) in the column f\n","pd.unique(data['f'])"]},{"cell_type":"markdown","metadata":{"id":"H_SKwIe9Rq6A"},"source":["So in the 1503 lines of data, there were 22 frequencies test"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":217,"status":"ok","timestamp":1655479569096,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"0xyTg2J2RXD_","outputId":"b23f38ae-1515-41ee-c3e0-b383c3b2232f"},"outputs":[{"data":{"text/plain":["array([ 0. ,  1.5,  3. ,  4. ,  2. ,  5.3,  7.3,  2.7,  5.4,  7.2,  9.9,\n","       12.6,  4.2,  8.4, 11.2, 15.4, 19.7,  4.8,  9.5, 12.7, 17.4, 22.2,\n","        3.3,  6.7,  8.9, 12.3, 15.6])"]},"execution_count":14,"metadata":{},"output_type":"execute_result"}],"source":["#In this data set, I know the frequency was one of the independent variables, but I'm not sure which frequencies were used- there's a code for that!\n","#this code gives back all unique values (pd.unique) in the data frame (data) in the column alpha\n","pd.unique(data['alpha'])"]},{"cell_type":"markdown","metadata":{"id":"Z46iBU5XRzn_"},"source":["So in the 1503 lines of data, there were 27 angles of attack (alpha) test"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":136,"status":"ok","timestamp":1655479617835,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"VcNWgSjdRdEY","outputId":"a1b3467b-5db5-44f7-eee3-efc530a283eb"},"outputs":[{"data":{"text/plain":["array([0.3048, 0.2286, 0.1524, 0.0508, 0.0254, 0.1016])"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["#In this data set, I know the frequency was one of the independent variables, but I'm not sure which frequencies were used- there's a code for that!\n","#this code gives back all unique values (pd.unique) in the data frame (data) in the column c\n","pd.unique(data['c'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"cwtEhlXUSBsf"},"outputs":[],"source":["#now, what I want to do is see if there is any obvious variation in the data, but only for one chord length, rather than looking at it all together\n","# Group data by cord length\n","grouped_data = data.groupby('c')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":217},"executionInfo":{"elapsed":179,"status":"error","timestamp":1655499721588,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"ude0XsjgSsQX","outputId":"af70edd2-2cc3-49bf-c60e-f6040819e99e"},"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-36-d17d00213e13>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Summary statistics for all numeric columns by heading\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mgrouped_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdescribe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;31m# Provide the mean for each numeric column by heading\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mgrouped_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m#this gives us the mean for each of the chord lengths\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'grouped_data' is not defined"]}],"source":["# Summary statistics for all numeric columns by heading\n","grouped_data.describe()\n","# Provide the mean for each numeric column by heading\n","grouped_data.mean() #this gives us the mean for each of the chord lengths"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":739},"executionInfo":{"elapsed":424,"status":"ok","timestamp":1655481432632,"user":{"displayName":"Megan Noel","userId":"04179015797307884569"},"user_tz":420},"id":"hfYzH4qbYUcX","outputId":"011a7c01-30fc-49c5-d5dd-0db9e9dd2a58"},"outputs":[{"data":{"text/html":["\n","  <div id=\"df-21af0b87-70bb-4fa1-a964-3f039fc91d3c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>alpha</th>\n","      <th>c</th>\n","      <th>U_infinity</th>\n","      <th>delta</th>\n","      <th>SSPL</th>\n","    </tr>\n","    <tr>\n","      <th>f</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>200</th>\n","      <td>12.182857</td>\n","      <td>0.109583</td>\n","      <td>49.348571</td>\n","      <td>0.023769</td>\n","      <td>124.511171</td>\n","    </tr>\n","    <tr>\n","      <th>250</th>\n","      <td>11.340476</td>\n","      <td>0.121557</td>\n","      <td>49.045238</td>\n","      <td>0.021148</td>\n","      <td>125.300524</td>\n","    </tr>\n","    <tr>\n","      <th>315</th>\n","      <td>9.619643</td>\n","      <td>0.142421</td>\n","      <td>47.394643</td>\n","      <td>0.017265</td>\n","      <td>125.712321</td>\n","    </tr>\n","    <tr>\n","      <th>400</th>\n","      <td>8.843478</td>\n","      <td>0.146142</td>\n","      <td>49.031884</td>\n","      <td>0.014878</td>\n","      <td>126.411058</td>\n","    </tr>\n","    <tr>\n","      <th>500</th>\n","      <td>8.117949</td>\n","      <td>0.145887</td>\n","      <td>48.758974</td>\n","      <td>0.013451</td>\n","      <td>126.672897</td>\n","    </tr>\n","    <tr>\n","      <th>630</th>\n","      <td>7.522727</td>\n","      <td>0.140566</td>\n","      <td>49.340909</td>\n","      <td>0.012196</td>\n","      <td>127.932216</td>\n","    </tr>\n","    <tr>\n","      <th>800</th>\n","      <td>6.960825</td>\n","      <td>0.139045</td>\n","      <td>50.480412</td>\n","      <td>0.011251</td>\n","      <td>128.711536</td>\n","    </tr>\n","    <tr>\n","      <th>1000</th>\n","      <td>6.862626</td>\n","      <td>0.137006</td>\n","      <td>50.180808</td>\n","      <td>0.011043</td>\n","      <td>128.584071</td>\n","    </tr>\n","    <tr>\n","      <th>1250</th>\n","      <td>6.794000</td>\n","      <td>0.137922</td>\n","      <td>50.392000</td>\n","      <td>0.010954</td>\n","      <td>128.143870</td>\n","    </tr>\n","    <tr>\n","      <th>1600</th>\n","      <td>6.683495</td>\n","      <td>0.134891</td>\n","      <td>50.539806</td>\n","      <td>0.010662</td>\n","      <td>126.815388</td>\n","    </tr>\n","    <tr>\n","      <th>2000</th>\n","      <td>6.601905</td>\n","      <td>0.132806</td>\n","      <td>50.784762</td>\n","      <td>0.010471</td>\n","      <td>125.713771</td>\n","    </tr>\n","    <tr>\n","      <th>2500</th>\n","      <td>6.536538</td>\n","      <td>0.132373</td>\n","      <td>51.273077</td>\n","      <td>0.010463</td>\n","      <td>124.952808</td>\n","    </tr>\n","    <tr>\n","      <th>3150</th>\n","      <td>6.534951</td>\n","      <td>0.132672</td>\n","      <td>51.232039</td>\n","      <td>0.010513</td>\n","      <td>123.893388</td>\n","    </tr>\n","    <tr>\n","      <th>4000</th>\n","      <td>6.533333</td>\n","      <td>0.132976</td>\n","      <td>51.035294</td>\n","      <td>0.010570</td>\n","      <td>122.254127</td>\n","    </tr>\n","    <tr>\n","      <th>5000</th>\n","      <td>6.023158</td>\n","      <td>0.138497</td>\n","      <td>50.960000</td>\n","      <td>0.009718</td>\n","      <td>121.100968</td>\n","    </tr>\n","    <tr>\n","      <th>6300</th>\n","      <td>5.555056</td>\n","      <td>0.142411</td>\n","      <td>51.279775</td>\n","      <td>0.009538</td>\n","      <td>119.322079</td>\n","    </tr>\n","    <tr>\n","      <th>8000</th>\n","      <td>3.494231</td>\n","      <td>0.139700</td>\n","      <td>54.396154</td>\n","      <td>0.004039</td>\n","      <td>120.584462</td>\n","    </tr>\n","    <tr>\n","      <th>10000</th>\n","      <td>2.433333</td>\n","      <td>0.142119</td>\n","      <td>55.461905</td>\n","      <td>0.002911</td>\n","      <td>118.593452</td>\n","    </tr>\n","    <tr>\n","      <th>12500</th>\n","      <td>1.208000</td>\n","      <td>0.140208</td>\n","      <td>58.000000</td>\n","      <td>0.001848</td>\n","      <td>118.768840</td>\n","    </tr>\n","    <tr>\n","      <th>16000</th>\n","      <td>1.369231</td>\n","      <td>0.128954</td>\n","      <td>62.169231</td>\n","      <td>0.001642</td>\n","      <td>118.068769</td>\n","    </tr>\n","    <tr>\n","      <th>20000</th>\n","      <td>2.266667</td>\n","      <td>0.093133</td>\n","      <td>66.033333</td>\n","      <td>0.001447</td>\n","      <td>118.375667</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21af0b87-70bb-4fa1-a964-3f039fc91d3c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-21af0b87-70bb-4fa1-a964-3f039fc91d3c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-21af0b87-70bb-4fa1-a964-3f039fc91d3c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["           alpha         c  U_infinity     delta        SSPL\n","f                                                           \n","200    12.182857  0.109583   49.348571  0.023769  124.511171\n","250    11.340476  0.121557   49.045238  0.021148  125.300524\n","315     9.619643  0.142421   47.394643  0.017265  125.712321\n","400     8.843478  0.146142   49.031884  0.014878  126.411058\n","500     8.117949  0.145887   48.758974  0.013451  126.672897\n","630     7.522727  0.140566   49.340909  0.012196  127.932216\n","800     6.960825  0.139045   50.480412  0.011251  128.711536\n","1000    6.862626  0.137006   50.180808  0.011043  128.584071\n","1250    6.794000  0.137922   50.392000  0.010954  128.143870\n","1600    6.683495  0.134891   50.539806  0.010662  126.815388\n","2000    6.601905  0.132806   50.784762  0.010471  125.713771\n","2500    6.536538  0.132373   51.273077  0.010463  124.952808\n","3150    6.534951  0.132672   51.232039  0.010513  123.893388\n","4000    6.533333  0.132976   51.035294  0.010570  122.254127\n","5000    6.023158  0.138497   50.960000  0.009718  121.100968\n","6300    5.555056  0.142411   51.279775  0.009538  119.322079\n","8000    3.494231  0.139700   54.396154  0.004039  120.584462\n","10000   2.433333  0.142119   55.461905  0.002911  118.593452\n","12500   1.208000  0.140208   58.000000  0.001848  118.768840\n","16000   1.369231  0.128954   62.169231  0.001642  118.068769\n","20000   2.266667  0.093133   66.033333  0.001447  118.375667"]},"execution_count":19,"metadata":{},"output_type":"execute_result"}],"source":["#now, what I want to do is see if there is any obvious variation in the data, but only for one frequency, rather than looking at it all together\n","# Group data by cord length\n","grouped_dataf = data.groupby('f')\n","# Summary statistics for all numeric columns by sex\n","grouped_dataf.describe()\n","# Provide the mean for each numeric column by sex\n","grouped_dataf.mean() #this gives us the mean for each of the f lengths"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KQC4dTPoZGvP"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"2oRalkcOkmL0"},"source":["# Credits\n","This notebook was written by Megan Noel from an notebook written by [Adam LaMee](http://www.adamlamee.com) using code from NASA via kaggle.com and code from many google searches. For license and more information visit [CODINGinK12.org](http://www.codingink12.org)."]}],"metadata":{"colab":{"provenance":[{"file_id":"1-bUbHnZbKoGMTb57Ty7TqfldIF94mKC4","timestamp":1694385103652},{"file_id":"1ARKQXvoHAcDIRPNAvxwKoHdpbYaED_ku","timestamp":1655822270935},{"file_id":"https://github.com/QuarkNet-HEP/coding-camp/blob/main/leptonic_decays_v2.ipynb","timestamp":1655328714492}]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"}},"nbformat":4,"nbformat_minor":0}