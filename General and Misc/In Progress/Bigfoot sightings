{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1MXRT2EATO5X_-N1mudQhzRbJUahnz2Oy","timestamp":1694384974141},{"file_id":"14bbvWAK5TCTxrYksheR3hymBW0EqYU-9","timestamp":1655821724330}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Teacher Implementation Plan\n","\n","I plan to use this as an into to coding activity for my physics honors classes, which are comprised of 10th-12th grade suburban students with little to no coding experience.\n","\n","This is a work in progress and I haven't finished the student walkthrough. The idea is to introduce necessary python skills while using a data set that is fun. I know I was overwhelmed with the coding and the data set that I wasn't very familiar with. I decided to have a fun activity that's kind of open ended. When it is complete, I want to give students the option of filtering out the data they want to look at. This way they have an introduction to the coding before they are overwhelmed with physics data they're also unfamiliar with.\n","\n","I plan to work on this in the first weeks of class. That way about a month later, they can use their new skills to quickly analyze freefall and projectile motion data we gather throwing things off the balcony."],"metadata":{"id":"EPziyQxIBj7-"}},{"cell_type":"markdown","source":["# Intro to Coding and Data Manipulation\n","We're going to work on a brief activity to help us learn some coding that's useful for data manipulation. Before we add in unfamiliar science, let's analyze some fun data.\n","\n","By the end of this activity you should be able to:\n","\n","\n","*   Import python packages to help manipulate data\n","*   Import csv files full of data from the internet\n","*   Learn to filter large sets of data\n","*   Plot interesting data as a scatter plot\n","*   Do simple math functions in python\n","*   Learn to ALWAYS LABEL AXES and GRAPHS\n","*   Critically think and come up with other factors that may affect a data set\n","\n","Let's get started.\n","\n","Each block is different functions we need to accomplish our goals. Anything in green that follows a # isn't read by the computer. These are comments to help humans understand what that line of code is doing. Click the play sign to run the line of code. Some of the code is written incorrectly. Some has info you need to change. Look for comments to help!\n","\n"],"metadata":{"id":"fqlo1hqzGYAU"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ftlZ0ifjR6TZ"},"outputs":[],"source":["# imports some software packages we'll use. Nothing here needs to be changed. Hit the play button!\n","import pandas as pd # Pandas works with python to help us wrangle data. It can sort, clean, and read our csv files. csv files are how we input data\n","import numpy as np # Numpy handles the math!\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt # Both of these help us make pretty graphs\n","!pip install geopandas\n","import geopandas as gpd # Geopandas helps us with geospatial data. We're using data with latitudes and longitudes... So we might need a map."]},{"cell_type":"markdown","source":["**Fun Fact: A lot of coding is copy and paste! No need to reinvent the wheel. You can copy code and then change it to fit your needs!**"],"metadata":{"id":"eSf3LZVylvuf"}},{"cell_type":"markdown","source":["# Data Acquisition\n","\n","Now that we've got all the tools we need, let's add some data! I found a csv file of BigFoot sightings in the US. Let's load that from here: https://query.data.world/s/sylnn5qhouzbjc37lh2ltteha5ubjn\n","\n","Copy and paste that link in the parentheses below."],"metadata":{"id":"SXIkQUYjmAA6"}},{"cell_type":"code","source":["# Loads the csv file of BigFoot sightings\n","BigFoot = pd.read_csv('https://query.data.world/s/sylnn5qhouzbjc37lh2ltteha5ubjn')\n","BigFoot.head() # This will display the data on our screen so we can take a look. What kind of information do we have to work with?"],"metadata":{"id":"7PMnTVR6mnTt"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# It Worked!\n"," **Cool! Our file loaded. Any time we want to use this data, we just need to use the name we defined \"BigFoot\".**\n","\n"," **The bottom of our chart says we have 28 different columns. And only 5 rows... It doesn't make sense for us to use a csv and python for only 5 different events. I bet there's more. Let's use the .shape command to find out how many rows and columns we have!**"],"metadata":{"id":"Ri1tcFTQpgr_"}},{"cell_type":"code","source":["BigFoot.shape # The .shape command tells us how many rows and columns our data file has"],"metadata":{"id":"3D5F-3SgfYfL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Uh Oh...\n","\n","**Why didn't that work? You can figure it out... Read the error. It'll give you a hint. Fix the problem and run it again.**\n","\n","**Now that it worked, how many columns do we have? How many rows?**\n","\n","**You should see** (5021, 28) **printed. Take a look at the columns. Let's learn how to trim this data a little.**\n","\n","**Let's focus on simple data analysis for now. The descriptions of the sightings are cool... But those are difficult/impossible to graph. Anything we trim will just be what WE CURRENTLY view... We won't be permanently changing the csv file. So, let's focus on a couple different pieces of this data for now. Let's plan to plot some sightings based on season and moon phase.**\n","\n","**We're going to use the .drop function to drop some of this info from our view. Remember we're not changing the actual file... Just our current view. We'll start by naming this new chart. Let's call it Trimmed for a name.**"],"metadata":{"id":"Xv-ce-AwrzIi"}},{"cell_type":"code","source":["#This is going to drop all the columns from our view that I've named here. Let's display it too. We might want to drop more.\n","Trimmed = BigFoot.drop(columns = ['observed', 'location_details', 'county', 'title', 'number', 'date', 'classification', 'geohash'])\n","Trimmed.head()\n"],"metadata":{"id":"YneizVC-uX-y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"QT89N6bZvpLh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**That's a little better... but we still have more to trim. Go back to the previous line of code. Keep adding column names, using the same format. Be careful that they are spelled exactly as they are in the chart. Don't forget to be careful with commas and spacing. Once you're done, rerun the line!**"],"metadata":{"id":"gBieupglvoCs"}},{"cell_type":"code","source":["Trimmed = BigFoot.query('moon_phase > 0.95')#Trims the data to Full Moon sightings\n","Trimmed.head() #This displays the filtered data."],"metadata":{"id":"w5ExDZ_JfbPy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Let's filter again. How many summer sightings are there?\n","data_trimmed_2 = BigFoot.query('season == \"Summer\"') # Why does this filter look different than the last?\n"],"metadata":{"id":"YHofL3l19gT5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n","world.plot();"],"metadata":{"id":"aIDr8bySYdZ4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Let's plot these sightings on a map!\n","fig, ax = plt.subplots(figsize=(12,7))\n","x = BigFoot['longitude'] # Pulls the x-coordinate from data (x on maps is longitude)\n","y = BigFoot['latitude'] # Pulls the y-coordinate from data (y on maps is latitude)\n","world.plot(ax=ax, color='lightblue', edgecolor='grey')     # this part is the map\n","ax.scatter(x,y, s=2, color='purple')    # this adds the scatter points on top (you can change the color!)\n","# What do we think the next three lines do?\n","ax.set_title('Big Foot Sightings in the Continental US')\n","ax.set_xlabel('Longitude')\n","ax.set_ylabel('Latitude')\n","ax.set_xlim(-160, -50)    # This zooms into the long. coordinates for the continental US\n","ax.set_ylim(0, 75)        # This zooms into the lat. coordinates for the continental US\n","plt.show()\n"],"metadata":{"id":"3jerNHPDUO-x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Let's plot some data for just Florida.\n","fig, ax = plt.subplots(figsize=(12,7))\n","x = BigFoot['longitude']\n","y = BigFoot['latitude']\n","world.plot(ax=ax, color='white', edgecolor='grey')     # this part is the map\n","ax.scatter(x,y, s=2, color='limegreen')    # this adds the scatter points on top\n","ax.set_title('Big Foot Sightings in Florida')\n","ax.set_xlabel('Longitude')\n","ax.set_ylabel('Latitude')\n","ax.set_xlim(-89, -78)\n","ax.set_ylim(24, 32)\n","plt.show() # What would've happened if I filtered for Florida sightings and didn't add this chunk of zoomed in code?"],"metadata":{"id":"wfFMjzhOoh7A"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# What would we need to change to use filtered data?\n","# Is there a way to overylay TWO sets of filtered data?\n","fig, ax = plt.subplots(figsize=(12,7))\n","x1 = data_trimmed_1['longitude']\n","y1 = data_trimmed_1['latitude']\n","x2 = data_trimmed_2['longitude']\n","y2 = data_trimmed_2['latitude']\n","world.plot(ax=ax, color='white', edgecolor='grey')     # this part is the map\n","ax.scatter(x2,y2, s=2, color='yellow')\n","ax.scatter(x1,y1, s=2, color='darkgreen')    # this adds the scatter points on top\n","ax.set_title('Big Foot Summer and Full Moon Sightings in the Continental US')\n","ax.set_xlabel('Longitude')\n","ax.set_ylabel('Latitude')\n","ax.set_xlim(-160, -50)\n","ax.set_ylim(18, 75)\n","plt.show()\n","\n","fig, ax = plt.subplots(figsize=(12,7))\n","x1 = data_trimmed_1['longitude']\n","y1 = data_trimmed_1['latitude']\n","x2 = data_trimmed_2['longitude']\n","y2 = data_trimmed_2['latitude']\n","world.plot(ax=ax, color='lightblue', edgecolor='grey')     # this part is the map\n","ax.scatter(x2,y2, s=2, color='yellow')\n","ax.scatter(x1,y1, s=2, color='hotpink')    # this adds the scatter points on top\n","ax.set_title('Big Foot Summer and Full Moon Sightings in Florida')\n","ax.set_xlabel('Longitude')\n","ax.set_ylabel('Latitude')\n","ax.set_xlim(-89, -78)\n","ax.set_ylim(24, 32)\n","plt.show()"],"metadata":{"id":"igZEeiPS8Umw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Let's look at another data set to see if there are any relevant comparisons! UFOs??\n","data3 = pd.read_csv('https://query.data.world/s/wsotcar7fqmw7b7nijt6xy46soxprw')\n"],"metadata":{"id":"w2TUEr_nCs6v"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize=(12,7))\n","x1 = BigFoot['longitude']\n","y1 = BigFoot['latitude']\n","x2 = data3['city_longitude']\n","y2 = data3['city_latitude']\n","world.plot(ax=ax, color='white', edgecolor='grey')     # this part is the map\n","\n","ax.scatter(x2,y2, s=2, color='yellow')\n","ax.scatter(x1,y1, s=2, color='darkgreen')\n","   # this adds the scatter points on top\n","ax.set_title('Big Foot and UFO Sightings in the Continental US')\n","ax.set_xlabel('Longitude')\n","ax.set_ylabel('Latitude')\n","ax.set_xlim(-160, -50)\n","ax.set_ylim(0, 75)\n","plt.show()\n","\n","\n","fig, ax = plt.subplots(figsize=(12,7))\n","x1 = BigFoot['longitude']\n","y1 = BigFoot['latitude']\n","x2 = data3['city_longitude']\n","y2 = data3['city_latitude']\n","world.plot(ax=ax, color='lightblue', edgecolor='grey')     # this part is the map\n","ax.scatter(x2,y2, s=2, color='yellow')\n","ax.scatter(x1,y1, s=2, color='darkgreen')   # this adds the scatter points on top\n","ax.set_title('Big Foot and UFO Sightings in Florida')\n","ax.set_xlabel('Longitude')\n","ax.set_ylabel('Latitude')\n","ax.set_xlim(-89, -78)\n","ax.set_ylim(24, 32)\n","plt.show()\n"],"metadata":{"id":"dGG2HMec_WXK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["AllMoon = BigFoot.fillna(0) # This line fills in a 0 for any missing data. This will make it easy to filter out incomplete data\n"],"metadata":{"id":"mGSK4LWMIdHZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["WithMoonData = AllMoon.query('moon_phase != 0') # Now, let's filter out the rows with no moon phase reported.\n","WithMoonData.shape # This will tell us how many rows are left, now that we've filtered out the sightings with no reported moon phase"],"metadata":{"id":"Mm3wWrHjJxOt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["NewMoon = AllMoon.query('moon_phase > 0 & moon_phase <.15')\n"],"metadata":{"id":"BxCeB9MeDJjJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["NewMoon.shape"],"metadata":{"id":"gtiCBjSODmXo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["(509/3391)*100"],"metadata":{"id":"wZiHtFiWJ2lI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data2.shape"],"metadata":{"id":"O_FilQA2IgI8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["CrescentMoon1 = BigFoot.query('moon_phase > .15 & moon_phase <.30 ')\n","CrescentMoon1.shape"],"metadata":{"id":"ZvO6mK1jDt-3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["CrescentMoon2 = BigFoot.query('moon_phase > .55 & moon_phase <.95')\n","CrescentMoon2.shape\n"],"metadata":{"id":"0LzQMA70EjbY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["448+1300"],"metadata":{"id":"R27dDx2lE9BX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["(1748/3391)*100"],"metadata":{"id":"6sfz_NV-IpT_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["QuarterMoon = BigFoot.query('moon_phase >.45  & moon_phase <.55')\n","QuarterMoon.shape"],"metadata":{"id":"WLeMbMKzD3b4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["(311/3391)*100"],"metadata":{"id":"D3gKQnrQIyd_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["FullMoon = BigFoot.query('moon_phase >.95 & moon_phase < 1.1') # Filters Full Moon sightings\n","FullMoon.shape"],"metadata":{"id":"T6x7FdAIIGgd"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["(161/3391)*100 # Calculates Full Moon Percentage of total sightings"],"metadata":{"id":"uOVyfZK4I2QF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Creates a pie chart of all sightings and type of moon. Does BigFoot only come out during certain times of the lunar cycle?\n","labels = 'Full', 'Quarter', 'Crescent', 'New'\n","sizes = [4.75, 9.2, 51.55, 15.1]\n","explode = (0, 0, 0, 0)  # No pie pieces are offset\n","\n","fig1, ax1 = plt.subplots()\n","ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n","        shadow=True, startangle=90)\n","ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n","\n","\n","plt.show()"],"metadata":{"id":"H_I50AnGCbTg"},"execution_count":null,"outputs":[]}]}